{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"计算机语言学习\" category",
    "description": "Maple的编程学习",
    "home_page_url": "https://maplelearc.github.io",
    "items": [
        {
            "id": "https://maplelearc.github.io/2022/10/08/Lua%E5%AD%A6%E4%B9%A0/",
            "url": "https://maplelearc.github.io/2022/10/08/Lua%E5%AD%A6%E4%B9%A0/",
            "title": "Lua入门学习",
            "date_published": "2022-10-08T09:41:18.000Z",
            "content_html": "<h1 id=\"lua-入门学习\"><a class=\"markdownIt-Anchor\" href=\"#lua-入门学习\">#</a> Lua 入门学习</h1>\n<hr>\n<h2 id=\"lua-基本语法\"><a class=\"markdownIt-Anchor\" href=\"#lua-基本语法\">#</a> Lua 基本语法</h2>\n<h3 id=\"交互式编程\"><a class=\"markdownIt-Anchor\" href=\"#交互式编程\">#</a> 交互式编程</h3>\n<p>Lua 提供了人交互式编程模式。可以在命令行中输出程序并立即查看效果<br>\n Lua 交互式编程通过命令 lua -i 或 lua 来启用：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ lua <span class=\"token parameter variable\">-i</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ lua Lua <span class=\"token number\">5.3</span>.0  Copyright <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token number\">1994</span>-2015 Lua.org, PUC-Rio</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>在命令行中，输入以下命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> print<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>按下回车，得到以下结果：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> print<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello World！</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"脚本编程\"><a class=\"markdownIt-Anchor\" href=\"#脚本编程\">#</a> 脚本编程</h3>\n<p>我们可以将 Lua 程序代码保持到一个以 lua 结尾的文件，并执行，该模式称为脚本式编程，如我们将如下代码存储在名为 hello.lua 的脚本文件中：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>print<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World！\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用 lua 名执行以上脚本，输出结果为：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ lua test.lua</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello World！</pre></td></tr></table></figure><p>我们也可以将代码修改为如下形式来执行脚本（在开头添加：#!/usr/local/bin/lua）：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/usr/local/bin/lua</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>print<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World！\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以上代码中，我们指定了 Lua 的解释器 /usr/local/bin directory。加上 # 号标记解释器会忽略它。接下来我们为脚本添加可执行权限，并执行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./test.lua</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello World！</pre></td></tr></table></figure><h3 id=\"注释\"><a class=\"markdownIt-Anchor\" href=\"#注释\">#</a> 注释</h3>\n<h4 id=\"单行注释\"><a class=\"markdownIt-Anchor\" href=\"#单行注释\">#</a> 单行注释</h4>\n<p>两个减号是单行注释</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--</span></pre></td></tr></table></figure><h4 id=\"多行注释\"><a class=\"markdownIt-Anchor\" href=\"#多行注释\">#</a> 多行注释</h4>\n<pre><code>--[[\n多行注释\n多行注释\n--]]\n</code></pre>\n<h3 id=\"标示符\"><a class=\"markdownIt-Anchor\" href=\"#标示符\">#</a> 标示符</h3>\n<p>Lua 标示符用于定义一个变量，函数获取其他用户定义的项。标示符以一个字母 A 到 Z 或 a 到 z 或下划线 _ 开头后加上 0 个或多个字母，下划线，数字（0 到 9）。最好不要使用下划线加大写字母的标示符，因为 Lua 的保留字也是这样的。</p>\n<p>Lua 不允许使用特殊字符如 @, $, 和 % 来定义标示符。 Lua 是一个区分大小写的编程语言。因此在 Lua 中 Test 与 test 是两个不同的标示符。以下列出了一些正确的标示符：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mohd         zara      abc     move_name    a_123</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myname50     _temp     j       a23b9        retVal</pre></td></tr></table></figure><h4 id=\"关键词\"><a class=\"markdownIt-Anchor\" href=\"#关键词\">#</a> 关键词</h4>\n<p>以下列出了 Lua 的保留关键字。保留关键字不能作为常量或变量或其他用户自定义标示符：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545745294943-c022acad-e773-4c4e-a469-fdf7b8517204.png\" alt=\"img\"></p>\n<p>一般约定，以下划线开头连接一串大写字母的名字（比如 _VERSION）被保留用于 Lua 内部全局变量。</p>\n<h3 id=\"全局变量\"><a class=\"markdownIt-Anchor\" href=\"#全局变量\">#</a> 全局变量</h3>\n<p>在默认情况下，变量总是认为是全局的。全局变量不需要声明，给一个变量赋值后即创建了这个全局变量，访问一个没有初始化的全局变量也不会出错，只不过得到的结果是：nil。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> print<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nil</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token assign-left variable\">b</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> print<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>如果你想删除一个全局变量，只需要将变量赋值为 nil。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>b <span class=\"token operator\">=</span> nil</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>print<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>      --<span class=\"token operator\">></span> nil</pre></td></tr></table></figure><p>这样变量 b 就好像从没被使用过一样。换句话说，当且仅当一个变量不等于 nil 时，这个变量即存在。</p>\n<hr>\n<h2 id=\"lua-数据类型\"><a class=\"markdownIt-Anchor\" href=\"#lua-数据类型\">#</a> Lua 数据类型</h2>\n<p>Lua 是动态数据类型语言，变量不要类型定义，只需要为变量赋值。 值可以存储在变量中，作为参数传递或结果返回。</p>\n<p>Lua 中有 8 个基本类型分别为：nil、boolean、number、string、userdata、function、thread 和 table。</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545746389947-7897ad1a-bbd1-4476-abe4-5f9ea9530fb0.png\" alt=\"img\"></p>\n<p>我们可以使用 type 函数测试给定变量或者值的类型：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">--> string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.4</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">--> number</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">--> function</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>               <span class=\"token comment\">--> function</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>               <span class=\"token comment\">--> boolean</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                <span class=\"token comment\">--> nil</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">--> string</span></pre></td></tr></table></figure><h3 id=\"nil空\"><a class=\"markdownIt-Anchor\" href=\"#nil空\">#</a> nil (空)</h3>\n<p>nil 表示一个没有任何有效值，它只有一个值–nil，例如打印一个没有赋值的变量，就会输出一个 nil 值：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">nil</span></pre></td></tr></table></figure><p>对于全局变量和 table，nil 还有一个 “删除” 作用，给全局变量或者 table 表里的变量赋一个 nil 值，等同于把它们删掉。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tab1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"val1\"</span><span class=\"token punctuation\">,</span> key2 <span class=\"token operator\">=</span> <span class=\"token string\">\"val2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"val3\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>tab1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">..</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">..</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>tab1<span class=\"token punctuation\">.</span>key1 <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>tab1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">..</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">..</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token operator\">-</span>val3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>key1<span class=\"token operator\">-</span>val1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>key2<span class=\"token operator\">-</span>val2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1</span><span class=\"token operator\">-</span>val3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>key2<span class=\"token operator\">-</span>val2</pre></td></tr></table></figure><p>nil 作比较时应该加上双引号 &quot;：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">\"nil\"</span></pre></td></tr></table></figure><p>结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">true</span></pre></td></tr></table></figure><h3 id=\"boolean\"><a class=\"markdownIt-Anchor\" href=\"#boolean\">#</a> boolean</h3>\n<p>boolean 类型只有两个可选值：true（真） 和 false（假），Lua 把 false 和 nil 看作是 &quot;假&quot;，其他的都为 &quot;真&quot;:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">false</span> <span class=\"token keyword\">or</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"至少有一个是true\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"false和nil都为false\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>执行结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>boolean</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>boolean</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">false</span>和<span class=\"token keyword\">nil</span>都为<span class=\"token keyword\">false</span></pre></td></tr></table></figure><h3 id=\"number数字\"><a class=\"markdownIt-Anchor\" href=\"#number数字\">#</a> number (数字)</h3>\n<p>Lua 默认只有一种 number 类型 – double（双精度）类型（默认类型可以修改 luaconf.h 里的定义），以下几种写法都被看作是 number 类型：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">2e+1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.2e-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">7.8263692594256e-06</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>执行结果为:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>number</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>number</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>number</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>number</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>number</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>number</pre></td></tr></table></figure><h3 id=\"string字符串\"><a class=\"markdownIt-Anchor\" href=\"#string字符串\">#</a> string (字符串)</h3>\n<p>字符串由一对双引号或单引号来表示。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string1 <span class=\"token operator\">=</span> <span class=\"token string\">\"this is string1\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string2 <span class=\"token operator\">=</span> <span class=\"token string\">'this is string2'</span></pre></td></tr></table></figure><p>也可以用 2 个方括号 “[[]]” 来表示 &quot;一块&quot; 字符串</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>html <span class=\"token operator\">=</span> <span class=\"token string\">[[</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;html></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;head>&lt;/head></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;body></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    &lt;a href=\"http://www.baidu.com/\">百度&lt;/a></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&lt;/body></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&lt;/html></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>]]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>执行结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.baidu.com/\"</span><span class=\"token operator\">></span>百度<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p>在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2+6\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-2e2\"</span><span class=\"token operator\">*</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>执行以上代码为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token number\">1200</span></pre></td></tr></table></figure><p>若是执行下面的代码：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>则会报错。Lua 中字符串连接使用的是 <code>..</code></p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">..</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">157</span> <span class=\"token operator\">..</span> <span class=\"token number\">428</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>执行结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ab</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">157428</span></pre></td></tr></table></figure><p>使用 **#** 来计算字符串的长度，放在字符串的前面：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>len <span class=\"token operator\">=</span> <span class=\"token string\">\"www.baidu.com\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">#</span>len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">#</span><span class=\"token string\">\"ww.baidu.com\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>执行结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">13</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">13</span></pre></td></tr></table></figure><h3 id=\"table表\"><a class=\"markdownIt-Anchor\" href=\"#table表\">#</a> table (表)</h3>\n<p>在 Lua 里，table 的创建是通过 &quot;构造表达式&quot; 来完成，最简单构造表达式是 {}，用来创建一个空表。也可以在表里添加一些数据，直接初始化表:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 创建一个空的 table</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> tbl1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 直接初始表</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">local</span> tbl2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"grape\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Lua 中的表（table）其实是一个 &quot;关联数组&quot;（associative arrays），数组的索引可以是数字或者是字符串。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"value\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>key <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">..</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">..</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>脚本执行结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>key <span class=\"token punctuation\">:</span> value</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">30</span></pre></td></tr></table></figure><p>不同于其他语言的数组把 0 作为数组的初始索引，在 Lua 里表的默认初始索引一般以 1 开始。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> tbl <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"grape\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> val <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Key\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>脚本执行结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Key    <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Key    <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Key    <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Key    <span class=\"token number\">4</span></pre></td></tr></table></figure><p>table 不会固定长度大小，有新数据添加时 table 长度会自动增长，没初始的 table 都是 nil。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    a3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a3<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"val\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a3<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a3<span class=\"token punctuation\">[</span><span class=\"token string\">\"none\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>脚本执行结果：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>val</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">nil</span></pre></td></tr></table></figure><h3 id=\"function函数\"><a class=\"markdownIt-Anchor\" href=\"#function函数\">#</a> function (函数)</h3>\n<p>在 Lua 中，函数是被看作是 &quot;第一类值（First-Class Value）&quot;，函数可以存在变量里:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">factorial1</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial1</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>factorial2 <span class=\"token operator\">=</span> factorial1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>脚本执行结果为：</p>\n<pre><code>120\n120\n</code></pre>\n<p>function 可以以匿名函数（anonymous function）的方式通过参数传递:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">testFun</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span>fun<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> k <span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>tab<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>key1<span class=\"token operator\">=</span><span class=\"token string\">\"val1\"</span><span class=\"token punctuation\">,</span>key2<span class=\"token operator\">=</span><span class=\"token string\">\"val2\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">testFun</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token comment\">-- 匿名函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> key<span class=\"token operator\">..</span><span class=\"token string\">\"=\"</span><span class=\"token operator\">..</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>脚本执行结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>key1 <span class=\"token operator\">=</span> val1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>key2 <span class=\"token operator\">=</span> val2</pre></td></tr></table></figure><h3 id=\"thread线程\"><a class=\"markdownIt-Anchor\" href=\"#thread线程\">#</a> thread (线程)</h3>\n<p>在 Lua 里，最主要的线程是协同程序（coroutine）。它跟线程（thread）差不多，拥有自己独立的栈、局部变量和指令指针，可以跟其他协同程序共享全局变量和其他大部分东西。</p>\n<p>线程跟协程的区别：线程可以同时多个运行，而协程任意时刻只能运行一个，并且处于运行状态的协程只有被挂起（suspend）时才会暂停。</p>\n<h3 id=\"userdata自定义类型\"><a class=\"markdownIt-Anchor\" href=\"#userdata自定义类型\">#</a> userdata (自定义类型)</h3>\n<p>userdata 是一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型，可以将任意 C/C++ 的任意数据类型的数据（通常是 struct 和 指针）存储到 Lua 变量中调用。</p>\n<hr>\n<h2 id=\"lua-变量\"><a class=\"markdownIt-Anchor\" href=\"#lua-变量\">#</a> Lua 变量</h2>\n<p>变量在使用前，必须在代码中进行声明，即创建该变量。</p>\n<p>编译程序执行代码之前编译器需要知道如何给语句变量开辟存储区，用于存储变量的值。</p>\n<p>Lua 变量有三种类型：全局变量、局部变量、表中的域。</p>\n<ul>\n<li>\n<p>Lua 中的变量全是全局变量，那怕是语句块或是函数里，除非用 local 显式声明为局部变量。</p>\n</li>\n<li>\n<p>局部变量的作用域为从声明位置开始到所在语句块结束。</p>\n</li>\n<li>\n<p>变量的默认值均为 nil。</p>\n</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">5</span>               <span class=\"token comment\">-- 全局变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span>         <span class=\"token comment\">-- 局部变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">joke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token number\">5</span>           <span class=\"token comment\">-- 全局变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">local</span> d <span class=\"token operator\">=</span> <span class=\"token number\">6</span>     <span class=\"token comment\">-- 局部变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">joke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span>          <span class=\"token comment\">--> 5 nil</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">local</span> a <span class=\"token operator\">=</span> <span class=\"token number\">6</span>     <span class=\"token comment\">-- 局部变量</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    b <span class=\"token operator\">=</span> <span class=\"token number\">6</span>           <span class=\"token comment\">-- 对局部变量重新赋值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">--> 6 6</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>      <span class=\"token comment\">--> 5 6</span></pre></td></tr></table></figure><p>执行以上实例输出结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">5</span>    <span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">6</span>    <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">5</span>    <span class=\"token number\">6</span></pre></td></tr></table></figure><h3 id=\"赋值语句\"><a class=\"markdownIt-Anchor\" href=\"#赋值语句\">#</a> 赋值语句</h3>\n<p>赋值是改变一个变量的值和改变表域的最基本的方法。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">..</span> <span class=\"token string\">\"world\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>Lua 可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>x       <span class=\"token operator\">&lt;</span><span class=\"token comment\">-->       a=10; b=2*x</span></pre></td></tr></table></figure><p>遇到赋值语句 Lua 会先计算右边所有的值然后再执行赋值操作，所以我们可以这样进行交换变量的值：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">,</span> x                     <span class=\"token comment\">-- swap 'x' for 'y'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>         <span class=\"token comment\">-- swap 'a[i]' for 'a[j]'</span></pre></td></tr></table></figure><p>当变量个数和值的个数不一致时，Lua 会一直以变量个数为基础采取以下策略：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">.</span> 变量个数 <span class=\"token operator\">></span> 值的个数             按变量个数补足<span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b<span class=\"token punctuation\">.</span> 变量个数 <span class=\"token operator\">&lt;</span> 值的个数             多余的值会被忽略</pre></td></tr></table></figure><p>例如：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>             <span class=\"token comment\">--> 0   1   nil</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">+</span><span class=\"token number\">2</span>     <span class=\"token comment\">-- value of b+2 is ignored</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>               <span class=\"token comment\">--> 1   2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>             <span class=\"token comment\">--> 0   nil   nil</span></pre></td></tr></table></figure><p>多值赋值经常用来交换变量，或将函数调用返回给变量：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>f () 返回两个值，第一个赋给 a，第二个赋给 b。</p>\n<p>应该尽可能的使用局部变量，有两个好处：1. 避免命名冲突。2. 访问局部变量的速度比全局变量更快。</p>\n<h3 id=\"索引\"><a class=\"markdownIt-Anchor\" href=\"#索引\">#</a> 索引</h3>\n<p>对 table 的索引使用方括号 [];Lua 也提供了。操作。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t<span class=\"token punctuation\">.</span>i                 <span class=\"token comment\">-- 当索引为字符串类型时的一种简化写法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">gettable_event</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 采用索引访问本质上是一个类似这样的函数调用</span></pre></td></tr></table></figure><p>例如:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>site <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>site<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"www.baidu.cc\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>site<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>site<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>www<span class=\"token punctuation\">.</span>baidu<span class=\"token punctuation\">.</span>cc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>www<span class=\"token punctuation\">.</span>baidu<span class=\"token punctuation\">.</span>cc</pre></td></tr></table></figure><hr>\n<h2 id=\"lua-循环\"><a class=\"markdownIt-Anchor\" href=\"#lua-循环\">#</a> Lua 循环</h2>\n<p>很多情况下我们需要做一些有规律性的重复操作，因此在程序中就需要重复执行某些语句。</p>\n<p>一组被重复执行的语句称之为循环体，能否继续重复，决定循环的终止条件。</p>\n<p>循环结构是在一定条件下反复执行某段程序的流程结构，被反复执行的程序被称为循环体。</p>\n<p>循环语句是由循环体及循环的终止条件两部分组成的。</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545793869721-221c9099-efbc-4138-a2b0-1d5ecb0710d9.png\" alt=\"img\"></p>\n<p>Lua 语言提供了以下几种循环处理方式：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545793890024-9bf3634c-bced-4a3b-a03b-8155d389d483.png\" alt=\"img\"></p>\n<p><strong>循环控制语句</strong></p>\n<p>循环控制语句用于控制程序的流程， 以实现程序的各种结构方式。</p>\n<p>Lua 支持以下循环控制语句：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545793918054-299b32a1-7e74-465f-9ad6-6c46aa29ad3c.png\" alt=\"img\"></p>\n<p><strong>无限循环</strong></p>\n<p>在循环体中如果条件永远为 true 循环语句就会永远执行下去，以下以 while 循环为例：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">true</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"循环将永远执行下去\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h3 id=\"while-循环\"><a class=\"markdownIt-Anchor\" href=\"#while-循环\">#</a> while 循环</h3>\n<h4 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\">#</a> 语法</h4>\n<p>Lua 编程语言中 while 循环语法：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    statements</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>statements (循环体语句) 可以是一条或多条语句，condition (条件) 可以是任意表达式，在 condition (条件) 为 true 时执行循环体语句。 流程图如下：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545794105298-442f3ac5-fbe0-4f54-87c0-324dd4c9c761.png\" alt=\"img\"></p>\n<p>在以上流程图中我们可以看出在 condition (条件) 为 false 时会跳过当前循环并开始脚本执行紧接着的语句。</p>\n<h4 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h4>\n<p>以下实例循环输出 a 的值：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值为:\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   a <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>执行以上代码，输出结果如下：</p>\n<pre><code>a 的值为:    10\na 的值为:    11\na 的值为:    12\na 的值为:    13\na 的值为:    14\na 的值为:    15\na 的值为:    16\na 的值为:    17\na 的值为:    18\na 的值为:    19\n</code></pre>\n<h3 id=\"for-循环\"><a class=\"markdownIt-Anchor\" href=\"#for-循环\">#</a> for 循环</h3>\n<p>Lua 编程语言中 for 循环语句可以重复执行指定语句，重复次数可在 for 语句中控制。</p>\n<p>Lua 编程语言中 for 语句有两大类：：</p>\n<ul>\n<li>\n<p>数值 for 循环</p>\n</li>\n<li>\n<p>泛型 for 循环</p>\n</li>\n</ul>\n<h4 id=\"数值-for-循环\"><a class=\"markdownIt-Anchor\" href=\"#数值-for-循环\">#</a> 数值 for 循环</h4>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> var<span class=\"token operator\">=</span>exp1<span class=\"token punctuation\">,</span>exp2<span class=\"token punctuation\">,</span>exp3 <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>执行体<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>var 从 exp1 变化到 exp2，每次变化以 exp3 为步长递增 var，并执行一次 &quot;执行体&quot;。exp3 是可选的，如果不指定，默认为 1。</p>\n<ul>\n<li><code>var</code>  首先执行，执行一次。此步骤允许声明和初始化任何循环控制变量</li>\n<li>接下来执行 <code>exp2</code> 。 这是循环继续执行的最大值或最小值。 它在内部创建条件检查，以比较初始值和最大 / 最小值。</li>\n<li>在执行 <code>for</code>  循环体之后，控制流会跳回到 <code>exp3</code>  语句。此语句用于更新循环控制变量。</li>\n<li>再次评估条件。 如果为真，则循环执行并且过程自身重复 (循环体，然后递增步骤，然后再次调节)。 条件变为 <code>false</code>  后， <code>for</code>  循环终止。</li>\n</ul>\n<h5 id=\"实例\"><a class=\"markdownIt-Anchor\" href=\"#实例\">#</a> 实例</h5>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>for 的三个表达式在循环开始前一次性求值，以后不再进行求值。比如上面的 f (x) 只会在循环开始前执行一次，其结果用在后面的循环中。</p>\n<p>验证如下:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>以上实例输出结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr></table></figure><h4 id=\"泛型-for-循环\"><a class=\"markdownIt-Anchor\" href=\"#泛型-for-循环\">#</a> 泛型 for 循环</h4>\n<p>泛型 for 循环通过一个迭代器函数来遍历所有值，类似 java 中的 foreach 语句。Lua 编程语言中泛型 for 循环语法格式:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 打印数组 a 的所有值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>i 是数组索引值，v 是对应索引的数组元素值。ipairs 是 Lua 提供的一个迭代器函数，用来迭代数组。</p>\n<h5 id=\"实例-2\"><a class=\"markdownIt-Anchor\" href=\"#实例-2\">#</a> 实例</h5>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>days <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Suanday\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Monday\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Tuesday\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Wednesday\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Thursday\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Friday\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Saturday\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>以上实例输出结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Suanday</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Monday</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Tuesday</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Wednesday</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thursday</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Friday</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Saturday</pre></td></tr></table></figure><h3 id=\"repeatuntil-循环\"><a class=\"markdownIt-Anchor\" href=\"#repeatuntil-循环\">#</a> repeat…until 循环</h3>\n<p>Lua 编程语言中 repeat…until 循环语句不同于 for 和 while 循环，for 和 while 循环的条件语句在当前循环执行开始时判断，而 repeat…until 循环的条件语句在当前循环结束后判断。</p>\n<h4 id=\"语法-2\"><a class=\"markdownIt-Anchor\" href=\"#语法-2\">#</a> 语法</h4>\n<p>Lua 编程语言中 repeat…until 循环语法格式:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">repeat</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   statements</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">until</span><span class=\"token punctuation\">(</span> condition <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们注意到循环条件判断语句（condition）在循环体末尾部分，所以在条件进行判断前循环体都会执行一次。</p>\n<p>如果条件判断语句（condition）为 false，循环会重新开始执行，直到条件判断语句（condition）为 true 才会停止执行。</p>\n<p>Lua repeat…until 循环流程图如下：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545795069201-5fce3157-e13f-4f9f-b0d0-e192ad94e769.png\" alt=\"img\"></p>\n<h4 id=\"实例-3\"><a class=\"markdownIt-Anchor\" href=\"#实例-3\">#</a> 实例</h4>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--[变量定义 --]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--[执行循环 --]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">repeat</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a的值为:\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">until</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">></span> <span class=\"token number\">15</span> ）</pre></td></tr></table></figure><p>执行以上代码，程序输出结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a的值为<span class=\"token punctuation\">:</span>    <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a的值为<span class=\"token punctuation\">:</span>    <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a的值为<span class=\"token punctuation\">:</span>    <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a的值为<span class=\"token punctuation\">:</span>    <span class=\"token number\">13</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a的值为<span class=\"token punctuation\">:</span>    <span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a的值为<span class=\"token punctuation\">:</span>    <span class=\"token number\">15</span></pre></td></tr></table></figure><h3 id=\"嵌套循环\"><a class=\"markdownIt-Anchor\" href=\"#嵌套循环\">#</a> 嵌套循环</h3>\n<h4 id=\"语法-3\"><a class=\"markdownIt-Anchor\" href=\"#语法-3\">#</a> 语法</h4>\n<p>Lua 编程语言中  <code>for</code>  循环嵌套语法格式:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> init<span class=\"token punctuation\">,</span>max<span class=\"token operator\">/</span>min value<span class=\"token punctuation\">,</span> increment</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">for</span> init<span class=\"token punctuation\">,</span>max<span class=\"token operator\">/</span>min value<span class=\"token punctuation\">,</span> increment</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      statements</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   statements</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>Lua 编程语言中  <code>while</code>  循环嵌套语法格式:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      statements</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   statements</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>Lua 编程语言中  <code>repeat...until</code>  循环嵌套语法格式:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">repeat</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   statements</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">repeat</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      statements</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">until</span><span class=\"token punctuation\">(</span> condition <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">until</span><span class=\"token punctuation\">(</span> condition <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"实例-4\"><a class=\"markdownIt-Anchor\" href=\"#实例-4\">#</a> 实例</h4>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>j <span class=\"token operator\">=</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">for</span> j<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">/</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">/</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i 的值为：\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>以上代码执行结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i 的值为：    <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>i 的值为：    <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>i 的值为：    <span class=\"token number\">10</span></pre></td></tr></table></figure><h3 id=\"break-语句\"><a class=\"markdownIt-Anchor\" href=\"#break-语句\">#</a> break 语句</h3>\n<p>Lua 编程语言 break 语句插入在循环体中，用于退出当前循环或语句，并开始脚本执行紧接着的语句。</p>\n<p>如果你使用循环嵌套，break 语句将停止最内层循环的执行，并开始执行的外层的循环语句。</p>\n<h4 id=\"语法-4\"><a class=\"markdownIt-Anchor\" href=\"#语法-4\">#</a> 语法</h4>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">break</span></pre></td></tr></table></figure><p>流程图：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545795441489-29359564-29c0-4153-9d50-4844cce2e22c.png\" alt=\"img\"></p>\n<h4 id=\"实例-5\"><a class=\"markdownIt-Anchor\" href=\"#实例-5\">#</a> 实例</h4>\n<p>下实例执行 while 循环，在变量 a 小于 20 时输出 a 的值，并在 a 大于 15 时终止执行循环：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--[定义变量 --]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">--[while 循环 --]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值为:\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   a<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">></span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">--[使用 break 语句终止循环 --]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>以上代码执行结果如下：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a 的值为<span class=\"token punctuation\">:</span>    <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a 的值为<span class=\"token punctuation\">:</span>    <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a 的值为<span class=\"token punctuation\">:</span>    <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a 的值为<span class=\"token punctuation\">:</span>    <span class=\"token number\">13</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a 的值为<span class=\"token punctuation\">:</span>    <span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a 的值为<span class=\"token punctuation\">:</span>    <span class=\"token number\">15</span></pre></td></tr></table></figure><hr>\n<h2 id=\"lua-流程控制\"><a class=\"markdownIt-Anchor\" href=\"#lua-流程控制\">#</a> Lua 流程控制</h2>\n<p>Lua 编程语言流程控制语句通过程序设定一个或多个条件语句来设定。在条件为 true 时执行指定程序代码，在条件为 false 时执行其他指定代码。</p>\n<p>下图是典型的流程控制流程图：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545795625575-64b9f249-ad85-4d9f-862a-5cd0ffcbb041.png\" alt=\"img\"></p>\n<p>控制结构的条件表达式结果可以是任何值，Lua 认为 false 和 nil 为假，true 和非 nil 为真。<br>\n要注意的是 Lua 中 0 为 true：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--[0 为 true]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0 为 true\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>以上代码输出结果为:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0</span> 为 <span class=\"token keyword\">true</span></pre></td></tr></table></figure><p>Lua 提供了以下控制结构语句：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545795674871-1b606327-d0f9-42a6-b2d4-9d80989d0922.png\" alt=\"img\"></p>\n<h3 id=\"if-语句\"><a class=\"markdownIt-Anchor\" href=\"#if-语句\">#</a> if 语句</h3>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">--[在布尔表达式为 true 时执行的语句 --]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>在布尔表达式为 true 时会 if 中的代码块会被执行，在布尔表达式为 false 时，紧跟在 if 语句 end 之后的代码会被执行。Lua 认为 false 和 nil 为假，true 和非 nil 为真。要注意的是 Lua 中 0 为 true。</p>\n<p>if 语句流程图如下：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545795704210-35cebb75-bc38-457b-98f5-648a9cb680d8.png\" alt=\"img\"></p>\n<h4 id=\"实例-6\"><a class=\"markdownIt-Anchor\" href=\"#实例-6\">#</a> 实例</h4>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--[定义变量 --]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">--[使用 if 语句 --]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">--[if 条件为 true 时打印以下信息 --]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 小于 20\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值为:\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a 小于 <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a 的值为<span class=\"token punctuation\">:</span>    <span class=\"token number\">10</span></pre></td></tr></table></figure><h3 id=\"ifelse-语句\"><a class=\"markdownIt-Anchor\" href=\"#ifelse-语句\">#</a> if…else 语句</h3>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">--[布尔表达式为 true 时执行该语句块 --]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">--[布尔表达式为 false 时执行该语句块 --]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>在布尔表达式为 true 时会 if 中的代码块会被执行，在布尔表达式为 false 时，else 的代码块会被执行。Lua 认为 false 和 nil 为假，true 和非 nil 为真。要注意的是 Lua 中 0 为 true。</p>\n<p>if 语句流程图如下：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545795776591-cf111597-927b-4ea3-af19-15f56fee05b2.png\" alt=\"img\"></p>\n<h4 id=\"实例-7\"><a class=\"markdownIt-Anchor\" href=\"#实例-7\">#</a> 实例</h4>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--[定义变量 --]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--[检查条件 --]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">--[if 条件为 true 时执行该语句块 --]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 小于 20\"</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">--[if 条件为 false 时执行该语句块 --]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 大于 20\"</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值为 :\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a 大于 <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a 的值为 <span class=\"token punctuation\">:</span>    <span class=\"token number\">100</span></pre></td></tr></table></figure><h3 id=\"ifelse-ifelse-语句\"><a class=\"markdownIt-Anchor\" href=\"#ifelse-ifelse-语句\">#</a> if…else if…else 语句</h3>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> 布尔表达式 <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">--[在布尔表达式 1 为 true 时执行该语句块 --]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">elseif</span><span class=\"token punctuation\">(</span> 布尔表达式 <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">--[在布尔表达式 2 为 true 时执行该语句块 --]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">elseif</span><span class=\"token punctuation\">(</span> 布尔表达式 <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">--[在布尔表达式 3 为 true 时执行该语句块 --]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">--[如果以上布尔表达式都不为 true 则执行该语句块 --]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h4 id=\"实例-8\"><a class=\"markdownIt-Anchor\" href=\"#实例-8\">#</a> 实例</h4>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--[定义变量 --]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">--[检查布尔条件 --]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">==</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">--[如果条件为 true 打印以下信息 --]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值为 10\"</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">elseif</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">==</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">--[if else if 条件为 true 时打印以下信息 --]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值为 20\"</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">elseif</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">==</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">--[if else if condition 条件为 true 时打印以下信息 --]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值为 30\"</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">--[以上条件语句没有一个为 true 时打印以下信息 --]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有匹配 a 的值\"</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的真实值为: \"</span><span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以上代码执行结果如下：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>没有匹配 a 的值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a 的真实值为<span class=\"token punctuation\">:</span>     <span class=\"token number\">100</span></pre></td></tr></table></figure><h3 id=\"if-嵌套语句\"><a class=\"markdownIt-Anchor\" href=\"#if-嵌套语句\">#</a> if 嵌套语句</h3>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> 布尔表达式 <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">--[布尔表达式 1 为 true 时执行该语句块 --]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式 <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">--[布尔表达式 2 为 true 时执行该语句块 --]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h5 id=\"实例-9\"><a class=\"markdownIt-Anchor\" href=\"#实例-9\">#</a> 实例</h5>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--[定义变量 --]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">--[检查条件 --]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">==</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">--[if 条件为 true 时执行以下 if 条件判断 --]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">==</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">--[if 条件为 true 时执行该语句块 --]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值为 100 b 的值为 200\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值为 :\"</span><span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b 的值为 :\"</span><span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上代码执行结果如下：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a 的值为 <span class=\"token number\">100</span> b 的值为 <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a 的值为 <span class=\"token punctuation\">:</span>    <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b 的值为 <span class=\"token punctuation\">:</span>    <span class=\"token number\">200</span></pre></td></tr></table></figure><hr>\n<h2 id=\"lua-函数\"><a class=\"markdownIt-Anchor\" href=\"#lua-函数\">#</a> Lua 函数</h2>\n<p>在 Lua 中，函数是对语句和表达式进行抽象的主要方法。既可以用来处理一些特殊的工作，也可以用来计算一些值。Lua 提供了许多的内建函数，你可以很方便的在程序中调用它们，如 print () 函数可以将传入的参数打印在控制台上。</p>\n<p>Lua 函数主要有两种用途：</p>\n<ul>\n<li>\n<p>1. 完成指定的任务，这种情况下函数作为调用语句使用；</p>\n</li>\n<li>\n<p>2. 计算并返回值，这种情况下函数作为赋值语句的表达式使用。</p>\n</li>\n</ul>\n<h3 id=\"函数定义\"><a class=\"markdownIt-Anchor\" href=\"#函数定义\">#</a> 函数定义</h3>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>optional_function_scope <span class=\"token keyword\">function</span> <span class=\"token function\">function_name</span><span class=\"token punctuation\">(</span> argument1<span class=\"token punctuation\">,</span> argument2<span class=\"token punctuation\">,</span> argument3<span class=\"token punctuation\">...</span><span class=\"token punctuation\">,</span> argumentn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    function_body</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> result_params_comma_separated</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>解析</p>\n<ul>\n<li>\n<p>optional_function_scope: 该参数是可选的制定函数是全局函数还是局部函数，未设置该参数默认为全局函数，如果你需要设置函数为局部函数需要使用关键字 local。</p>\n</li>\n<li>\n<p>function_name: 指定函数名称。</p>\n</li>\n<li>\n<p>argument1, argument2, argument3…, argumentn: 函数参数，多个参数以逗号隔开，函数也可以不带参数。</p>\n</li>\n<li>\n<p>function_body: 函数体，函数中需要执行的代码语句块。</p>\n</li>\n<li>\n<p>result_params_comma_separated: 函数返回值，Lua 语言函数可以返回多个值，每个值以逗号隔开。</p>\n</li>\n</ul>\n<h4 id=\"实例-10\"><a class=\"markdownIt-Anchor\" href=\"#实例-10\">#</a> 实例</h4>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--[[函数返回两个值的最大值 --]]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> num2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      result <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      result <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 调用函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"两值比较最大值为 \"</span><span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"两值比较最大值为 \"</span><span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以上代码执行结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>两值比较最大值为     <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>两值比较最大值为     <span class=\"token number\">6</span></pre></td></tr></table></figure><p>Lua 中我们可以将函数作为参数传递给函数，如下实例：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myprint <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是打印函数 -   ##\"</span><span class=\"token punctuation\">,</span>param<span class=\"token punctuation\">,</span><span class=\"token string\">\"##\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span>num2<span class=\"token punctuation\">,</span>functionPrint<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   result <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> num2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">-- 调用传递的函数参数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token function\">functionPrint</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">myprint</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- myprint 函数作为参数传递</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>myprint<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以上代码执行结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>这是打印函数 <span class=\"token operator\">-</span>   <span class=\"token operator\">#</span><span class=\"token operator\">#</span>    <span class=\"token number\">10</span>    <span class=\"token operator\">#</span><span class=\"token operator\">#</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这是打印函数 <span class=\"token operator\">-</span>   <span class=\"token operator\">#</span><span class=\"token operator\">#</span>    <span class=\"token number\">7</span>    <span class=\"token operator\">#</span><span class=\"token operator\">#</span></pre></td></tr></table></figure><h3 id=\"多返回值\"><a class=\"markdownIt-Anchor\" href=\"#多返回值\">#</a> 多返回值</h3>\n<p>Lua 函数可以返回多个结果值，比如 string.find，其返回匹配串 &quot;开始和结束的下标&quot;（如果不存在匹配串返回 nil）。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s<span class=\"token punctuation\">,</span> e <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.baidu.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"baidu\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">5</span>    <span class=\"token number\">9</span></pre></td></tr></table></figure><p>Lua 函数中，在 return 后列出要返回的值得列表即可返回多值，如</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">maximum</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">local</span> mi <span class=\"token operator\">=</span> <span class=\"token number\">1</span>             <span class=\"token comment\">-- 最大值索引</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">local</span> m <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>mi<span class=\"token punctuation\">]</span>          <span class=\"token comment\">-- 最大值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>val <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token keyword\">if</span> val <span class=\"token operator\">></span> m <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           mi <span class=\"token operator\">=</span> i</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           m <span class=\"token operator\">=</span> val</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">,</span> mi</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">maximum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以上代码执行结果为：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">23</span>    <span class=\"token number\">3</span></pre></td></tr></table></figure><h3 id=\"可变参数\"><a class=\"markdownIt-Anchor\" href=\"#可变参数\">#</a> 可变参数</h3>\n<p>Lua 函数可以接受可变数目的参数，和 C 语言类似，在函数参数列表中使用三点 … 表示函数有可变的参数。</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">do</span>   <span class=\"token comment\">--> &#123;...&#125; 表示一个由所有变长参数构成的数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    s <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> v</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> s</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">--->25</span></pre></td></tr></table></figure><p>我们可以将可变参数赋值给一个变量。例如，我们计算几个数的平均值：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   result <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">local</span> arg<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">&#125;</span>    <span class=\"token comment\">--> arg 为一个表，局部变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      result <span class=\"token operator\">=</span> result <span class=\"token operator\">+</span> v</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总共传入 \"</span> <span class=\"token operator\">..</span> <span class=\"token operator\">#</span>arg <span class=\"token operator\">..</span> <span class=\"token string\">\" 个数\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">return</span> result<span class=\"token operator\">/</span><span class=\"token operator\">#</span>arg</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"平均值为\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token number\">25</span></pre></td></tr></table></figure><p>我们也可以通过 select (&quot;#&quot;,…) 来获取可变参数的数量:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   result <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">local</span> arg<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      result <span class=\"token operator\">=</span> result <span class=\"token operator\">+</span> v</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总共传入 \"</span> <span class=\"token operator\">..</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">..</span> <span class=\"token string\">\" 个数\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">return</span> result<span class=\"token operator\">/</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"平均值为\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>有时候我们可能需要几个固定参数加上可变参数，固定参数必须放在变长参数之前:</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">---> 固定的参数 fmt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"runoob\\n\"</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">--->fmt = \"runoob\", 没有变长参数。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">--->fmt = \"% d% d\", 变长参数为 1 和 1</span></pre></td></tr></table></figure><p>通常在遍历变长参数的时候只需要使用 {…}，然而变长参数可能会包含一些 nil，那么就可以用 select 函数来访问变长参数了：select (’#’, …) 或者 select (n, …)</p>\n<ul>\n<li>\n<p>select (’#’, …) 返回可变参数的长度</p>\n</li>\n<li>\n<p>select (n, …) 用于访问 n 到 select (’#’,…) 的参数</p>\n</li>\n</ul>\n<p>调用 select 时，必须传入一个固定实参 selector (选择开关) 和一系列变长参数。如果 selector 为数字 n, 那么 select 返回它的第 n 个可变实参，否则只能为字符串 &quot;#&quot;, 这样 select 会返回变长参数的总数。例子代码：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>  <span class=\"token comment\">--> 获取参数总数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">local</span> arg <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">--> 读取参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arg\"</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>输出结果：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arg    <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arg    <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arg    <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arg    <span class=\"token number\">4</span></pre></td></tr></table></figure><hr>\n<h2 id=\"lua-运算符\"><a class=\"markdownIt-Anchor\" href=\"#lua-运算符\">#</a> Lua 运算符</h2>\n<p>运算符是一个特殊的符号，用于告诉解释器执行特定的数学或逻辑运算。Lua 提供了以下几种运算符类型：</p>\n<ul>\n<li>\n<p>算术运算符</p>\n</li>\n<li>\n<p>关系运算符</p>\n</li>\n<li>\n<p>逻辑运算符</p>\n</li>\n<li>\n<p>其他运算符</p>\n</li>\n</ul>\n<h3 id=\"算数运算符\"><a class=\"markdownIt-Anchor\" href=\"#算数运算符\">#</a> 算数运算符</h3>\n<p>下表列出了 Lua 语言中的常用算术运算符，设定 A 的值为 10，B 的值为 20：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545796915099-182b544e-343b-4338-827b-16d5ce9807ff.png\" alt=\"img\"></p>\n<h3 id=\"关系运算符\"><a class=\"markdownIt-Anchor\" href=\"#关系运算符\">#</a> 关系运算符</h3>\n<p>下表列出了 Lua 语言中的常用关系运算符，设定 A 的值为 10，B 的值为 20：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545796934445-08762e3c-8245-4964-ba85-d2469ae31630.png\" alt=\"img\"></p>\n<h3 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h3>\n<p>下表列出了 Lua 语言中的常用逻辑运算符，设定 A 的值为 true，B 的值为 false：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545796955997-b3a7dee8-81f8-42ce-9631-1f0e30b15143.png\" alt=\"img\"></p>\n<h3 id=\"其他运算符\"><a class=\"markdownIt-Anchor\" href=\"#其他运算符\">#</a> 其他运算符</h3>\n<p>下表列出了 Lua 语言中的连接运算符与计算表或字符串长度的运算符：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545796993558-cd2c7425-bff9-46c2-96f7-40ab6574733b.png\" alt=\"img\"></p>\n<h3 id=\"运算符优先级\"><a class=\"markdownIt-Anchor\" href=\"#运算符优先级\">#</a> 运算符优先级</h3>\n<p>从高到低的顺序：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">^</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">not</span>    <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>unary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span>      <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span>      <span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">..</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>      <span class=\"token operator\">></span>      <span class=\"token operator\">&lt;=</span>     <span class=\"token operator\">>=</span>     <span class=\"token operator\">~=</span>     <span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">and</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">or</span></pre></td></tr></table></figure><p>除了 ^ 和… 外所有的二元运算符都是左连接的</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token operator\">+</span>i <span class=\"token operator\">&lt;</span> b<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>          <span class=\"token operator\">&lt;</span><span class=\"token comment\">-->       (a+i) &lt; ((b/2)+1)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">5</span><span class=\"token operator\">+</span>x<span class=\"token operator\">^</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">8</span>              <span class=\"token operator\">&lt;</span><span class=\"token comment\">-->       5+((x^2)*8)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">&lt;</span> y <span class=\"token keyword\">and</span> y <span class=\"token operator\">&lt;=</span> z     <span class=\"token operator\">&lt;</span><span class=\"token comment\">-->       (a &lt; y) and (y &lt;= z)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">-</span>x<span class=\"token operator\">^</span><span class=\"token number\">2</span>                 <span class=\"token operator\">&lt;</span><span class=\"token comment\">-->       -(x^2)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x<span class=\"token operator\">^</span>y<span class=\"token operator\">^</span>z                <span class=\"token operator\">&lt;</span><span class=\"token comment\">-->       x^(y^z)</span></pre></td></tr></table></figure><hr>\n<h2 id=\"lua-字符串\"><a class=\"markdownIt-Anchor\" href=\"#lua-字符串\">#</a> Lua 字符串</h2>\n<p>字符串或串 (String) 是由数字、字母、下划线组成的一串字符</p>\n<p>Lua 语言中字符串可以使用以下三种方式来表示：</p>\n<ul>\n<li>\n<p>单引号间的一串字符</p>\n</li>\n<li>\n<p>双引号的一串字符</p>\n</li>\n<li>\n<p>[[和]] 间的一串字符</p>\n</li>\n</ul>\n<p>以上三种方式的字符串实例如下：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Lua\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"字符串 1 是\\\"\"</span><span class=\"token punctuation\">,</span>string1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string2 <span class=\"token operator\">=</span> <span class=\"token string\">'runoob.com'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符串 2 是\"</span><span class=\"token punctuation\">,</span>string2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>string3 <span class=\"token operator\">=</span> <span class=\"token string\">[[\"Lua 教程\"]]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符串 3 是\"</span><span class=\"token punctuation\">,</span>string3<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以上代码执行输出结果是：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"字符串 1 是\"</span>    Lua</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>字符串 <span class=\"token number\">2</span> 是    runoob<span class=\"token punctuation\">.</span>com</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>字符串 <span class=\"token number\">3</span> 是    <span class=\"token string\">\"Lua 教程\"</span></pre></td></tr></table></figure><p>转义字符用于表示不能直接显示的字符，比如后退键，回车键，等。如在字符串转换双引号可以使用 “”&quot;。所有的转义字符和所对应的意义：</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545799061644-a6952d51-146a-4331-a0f6-2eeb9c40ac00.png\" alt=\"img\"></p>\n<h3 id=\"字符串操作\"><a class=\"markdownIt-Anchor\" href=\"#字符串操作\">#</a> 字符串操作</h3>\n<p><img data-src=\"http://lgqimg.changzer.cn/img/1545799123960-edb58671-3992-4e1c-9e3d-4c84aac76664.png\" alt=\"img\"></p>\n<h3 id=\"字符串格式化\"><a class=\"markdownIt-Anchor\" href=\"#字符串格式化\">#</a> 字符串格式化</h3>\n<p>Lua 提供了 string.format () 函数来生成具有特定格式的字符串，函数的第一个参数是格式，之后是对应格式中每个代号的各种数据。</p>\n<p>由于格式字符串的存在，使得产生的长字符串可读性大大提高了。这个函数的格式很像 C 语言中的 printf ()。</p>\n<p>以下实例演示了如何对字符串进行格式化操作：格式字符串可能包含以下的转义码:</p>\n<ul>\n<li>\n<p>% c - 接受一个数字，并将其转化为 ASCII 码表中对应的字符</p>\n</li>\n<li>\n<p>% d, % i - 接受一个数字并将其转化为有符号的整数格式</p>\n</li>\n<li>\n<p>% o - 接受一个数字并将其转化为八进制数格式</p>\n</li>\n<li>\n<p>% u - 接受一个数字并将其转化为无符号整数格式</p>\n</li>\n<li>\n<p>% x - 接受一个数字并将其转化为十六进制数格式，使用小写字母</p>\n</li>\n<li>\n<p>% X - 接受一个数字并将其转化为十六进制数格式，使用大写字母</p>\n</li>\n<li>\n<p>% e - 接受一个数字并将其转化为科学记数法格式，使用小写字母 e</p>\n</li>\n<li>\n<p>% E - 接受一个数字并将其转化为科学记数法格式，使用大写字母 E</p>\n</li>\n<li>\n<p>% f - 接受一个数字并将其转化为浮点数格式</p>\n</li>\n<li>\n<p>% g (% G) - 接受一个数字并将其转化为 % e (% E, 对应 % G) 及 % f 中较短的一种格式</p>\n</li>\n<li>\n<p>% q - 接受一个字符串并将其转化为可安全被 Lua 编译器读入的格式</p>\n</li>\n<li>\n<p>% s - 接受一个字符串并按照给定的参数格式化该字符串</p>\n</li>\n</ul>\n<p>为进一步细化格式，可以在 % 号后添加参数。参数将以如下的顺序读入:</p>\n<ul>\n<li>\n<p>(1) 符号：一个 + 号表示其后的数字转义符将让正数显示正号。默认情况下只有负数显示符号.</p>\n</li>\n<li>\n<p>(2) 占位符：一个 0, 在后面指定了字串宽度时占位用。不填时的默认占位符是空格.</p>\n</li>\n<li>\n<p>(3) 对齐标识：在指定了字串宽度时，默认为右对齐，增加 - 号可以改为左对齐.</p>\n</li>\n<li>\n<p>(4) 宽度数值</p>\n</li>\n<li>\n<p>(5) 小数位数 / 字串裁切：在宽度数值后增加的小数部分 n, 若后接 f (浮点数转义符，如 %6.3f) 则设定该浮点数的小数只保留 n 位，若后接 s (字符串转义符，如 %5.3s) 则设定该字符串只显示前 n 位.</p>\n</li>\n</ul>\n",
            "tags": [
                "Lua"
            ]
        },
        {
            "id": "https://maplelearc.github.io/2022/10/04/Mysql/",
            "url": "https://maplelearc.github.io/2022/10/04/Mysql/",
            "title": "MySql",
            "date_published": "2022-10-04T09:55:38.762Z",
            "content_html": "<h1 id=\"mysql\"><a class=\"anchor\" href=\"#mysql\">#</a> Mysql</h1>\n<h2 id=\"1-sql语句\"><a class=\"anchor\" href=\"#1-sql语句\">#</a> 1、Sql 语句</h2>\n<h3 id=\"1-ddl数据定义语言用来定义数据库对象数据库-表-字段\"><a class=\"anchor\" href=\"#1-ddl数据定义语言用来定义数据库对象数据库-表-字段\">#</a> (1) <strong>DDL—— 数据定义语言，用来定义数据库对象 (数据库、表、字段)</strong></h3>\n<blockquote>\n<ul>\n<li>查询所有数据库</li>\n</ul>\n<pre><code class=\"language-SQL\">show databases；\n</code></pre>\n<ul>\n<li>查询当前数据库</li>\n</ul>\n<pre><code class=\"language-SQL\">select database();\n</code></pre>\n<ul>\n<li>创建数据库</li>\n</ul>\n<pre><code class=\"language-SQL\">creat database [if not exists] 数据库名 [default charset 字符集] [collate 排序规则];\n--if not exists 表示若数据库存在，则不创建\n</code></pre>\n<ul>\n<li>删除数据库</li>\n</ul>\n<pre><code class=\"language-SQL\">drop database[if exists]数据库名；\n--if exists 表示若数据库不存在，则不删除\n</code></pre>\n<ul>\n<li>使用数据库</li>\n</ul>\n<pre><code class=\"language-SQL\">use 数据库名；\n</code></pre>\n<ul>\n<li>查询当前数据库所有表</li>\n</ul>\n<pre><code class=\"language-SQL\">show tables；\n</code></pre>\n<ul>\n<li>查询表结构</li>\n</ul>\n<pre><code class=\"language-SQL\">desc 表名；\n</code></pre>\n<ul>\n<li>查询指定表的建表语句</li>\n</ul>\n<pre><code class=\"language-SQL\">show create table 表名；\n</code></pre>\n<ul>\n<li>表创建</li>\n</ul>\n<pre><code class=\"language-SQL\">create table 表名(\n字段1 字段1类型[COMMENT 字段1注释],\n字段2 字段2类型[COMMEN+T 字段2注释],\n字段3 字段3类型[COMMENT 字段3注释],\n......\n字段n 字段n类型[COMMENT 字段n注释]\n)[COMMENT 表注释];\n</code></pre>\n<ul>\n<li>添加表的字段</li>\n</ul>\n<pre><code class=\"language-SQL\">alter table 表名 add 字段名 类型(长度)[COMMENT 注释][约束];\n</code></pre>\n<ul>\n<li>修改表的字段名和字段类型</li>\n</ul>\n<pre><code class=\"language-SQL\">alter table 表名 change 旧字段名 新字段名 类型(长度) [COMMENT 注释][约束];\n</code></pre>\n<ul>\n<li>修改字段的数据类型</li>\n</ul>\n<pre><code class=\"language-SQL\">alter table 表名 modify 字段名 新数据类型;\n</code></pre>\n<ul>\n<li>修改表名</li>\n</ul>\n<pre><code class=\"language-SQL\">alter table 表名 reanme to 新表名;\n</code></pre>\n<ul>\n<li>删除字段</li>\n</ul>\n<pre><code class=\"language-SQL\">alter table 表名 drop 字段名;\n</code></pre>\n<ul>\n<li>删除表</li>\n</ul>\n<pre><code class=\"language-SQL\">drop table[if exists] 表名;\n</code></pre>\n<ul>\n<li>删除指定表，并重新创建该表</li>\n</ul>\n<pre><code class=\"language-SQL\">truncate table 表名;\n--删除表后，表中的数据也会删除\n</code></pre>\n</blockquote>\n<h3 id=\"2-dml数据操作语言用来对数据库表中的数据进行增删改\"><a class=\"anchor\" href=\"#2-dml数据操作语言用来对数据库表中的数据进行增删改\">#</a> (2) <strong>DML—— 数据操作语言，用来对数据库表中的数据进行增删改</strong></h3>\n<blockquote>\n<ul>\n<li>查询所有数据库</li>\n</ul>\n<pre><code class=\"language-SQL\">show databases；\n</code></pre>\n<ul>\n<li>查询当前数据库</li>\n</ul>\n<pre><code class=\"language-SQL\">select database();\n</code></pre>\n<ul>\n<li>创建数据库</li>\n</ul>\n<pre><code class=\"language-SQL\">creat database [if not exists] 数据库名 [default charset 字符集] [collate 排序规则];\n--if not exists 表示若数据库存在，则不创建\n</code></pre>\n<ul>\n<li>删除数据库</li>\n</ul>\n<pre><code class=\"language-SQL\">drop database[if exists]数据库名；\n--if exists 表示若数据库不存在，则不删除\n</code></pre>\n<ul>\n<li>使用数据库</li>\n</ul>\n<pre><code class=\"language-SQL\">use 数据库名；\n</code></pre>\n<ul>\n<li>查询当前数据库所有表</li>\n</ul>\n<pre><code class=\"language-SQL\">show tables；\n</code></pre>\n<ul>\n<li>查询表结构</li>\n</ul>\n<pre><code class=\"language-SQL\">desc 表名；\n</code></pre>\n<ul>\n<li>查询指定表的建表语句</li>\n</ul>\n<pre><code class=\"language-SQL\">show create table 表名；\n</code></pre>\n<ul>\n<li>表创建</li>\n</ul>\n<pre><code class=\"language-SQL\">create table 表名(\n字段1 字段1类型[COMMENT 字段1注释],\n字段2 字段2类型[COMMENT 字段2注释],\n字段3 字段3类型[COMMENT 字段3注释],\n......\n字段n 字段n类型[COMMENT 字段n注释]\n)[COMMENT 表注释];\n</code></pre>\n<ul>\n<li>添加表的字段</li>\n</ul>\n<pre><code class=\"language-SQL\">alter table 表名 add 字段名 类型(长度)[COMMENT 注释][约束];\n</code></pre>\n<ul>\n<li>修改表的字段名和字段类型</li>\n</ul>\n<pre><code class=\"language-SQL\">alter table 表名 change 旧字段名 新字段名 类型(长度) [COMMENT 注释][约束];\n</code></pre>\n<ul>\n<li>修改字段的数据类型</li>\n</ul>\n<pre><code class=\"language-SQL\">alter table 表名 modify 字段名 新数据类型;\n</code></pre>\n<ul>\n<li>修改表名</li>\n</ul>\n<pre><code class=\"language-SQL\">alter table 表名 reanme to 新表名;\n</code></pre>\n<ul>\n<li>删除字段</li>\n</ul>\n<pre><code class=\"language-SQL\">alter table 表名 drop 字段名;\n</code></pre>\n<ul>\n<li>删除表</li>\n</ul>\n<pre><code class=\"language-SQL\">drop table[if exists] 表名;\n</code></pre>\n<ul>\n<li>删除指定表，并重新创建该表</li>\n</ul>\n<pre><code class=\"language-SQL\">truncate table 表名;\n--删除表后，表中的数据也会删除\n</code></pre>\n</blockquote>\n<h3 id=\"3-dql数据查询语言用来查询数据库中的表的记录\"><a class=\"anchor\" href=\"#3-dql数据查询语言用来查询数据库中的表的记录\">#</a> (3) <strong>DQL—— 数据查询语言，用来查询数据库中的表的记录</strong></h3>\n<blockquote>\n<ol>\n<li>基本查询</li>\n</ol>\n<ul>\n<li>查询多个字段</li>\n</ul>\n<pre><code class=\"language-SQL\">select 字段1,字段2,字段3,... from 表名;\nselect *from 表名;--查询整张表\n- 设置别名\nselect 字段1[as 别名1],字段2[as 别名2],字段3[as 别名3],...from 表名;\n- 无处重复记录\nselect distinct 字段列表 from 表名;\n</code></pre>\n<ol>\n<li>条件查询</li>\n</ol>\n<ul>\n<li>\n<p>语法</p>\n<pre><code class=\"language-SQL\">select 字段列表 from where 条件列表;\n</code></pre>\n</li>\n<li>\n<p>条件</p>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226113100627.png\" alt=\"image-20220226113100627\" /></p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"language-SQL\">select 字段列表 from where 条件列表;\n</code></pre>\n<ol>\n<li>聚合函数</li>\n</ol>\n<ul>\n<li>\n<p>介绍</p>\n<p>将一列数据作为一个整体，进行纵向计算。</p>\n</li>\n<li>\n<p>常见聚合函数</p>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226112903488.png\" alt=\"image-20220226112903488\" /></p>\n</blockquote>\n</li>\n<li>\n<p>语法</p>\n</li>\n</ul>\n<pre><code class=\"language-SQL\">select 聚合函数(字段列表) from 表名;\n</code></pre>\n<ol>\n<li>分组查询</li>\n</ol>\n<ul>\n<li>语法</li>\n</ul>\n<pre><code class=\"language-SQL\">select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件]\n  - where和having区别\n      - 执行实际不同：where是分组之前进行过滤，不满条件where条件，不参与分组；having是分组之后对结果进行过滤。\n      - 判断条件不同：where不能对聚合函数进行判断，而having可以。\n</code></pre>\n<ol>\n<li>排序查询</li>\n</ol>\n<ul>\n<li>语法</li>\n</ul>\n<pre><code class=\"language-SQL\">select 字段列表 from 表名 order by 字段1 排序方式,字段2 排序方式2;\n</code></pre>\n<ul>\n<li>排序方式</li>\n<li>ASC：升序 (默认值)</li>\n<li>DESC：降序</li>\n<li>如果是多字段排序，当第一个字段排序值相同时，才会根据第二个字段进行排序</li>\n</ul>\n<ol>\n<li>分页查询</li>\n</ol>\n<ul>\n<li>语法</li>\n</ul>\n<pre><code class=\"language-SQL\">select 字段列表 from 表明 limit 起始索引,查询记录数;\n</code></pre>\n<ul>\n<li>注意</li>\n<li>起始索引从 0 开始，起始索引 =(查询页码 - 1)* 咩野显示记录数。</li>\n<li>分页茶树是数据库的方言，不同的数据库有不同的实现，Mysql 中是 LIMIT。</li>\n<li>如果查询的是第一页数据，起始索引可以省略，直接简写为 [limit 查询记录数]。</li>\n</ul>\n<ol>\n<li>语句执行顺序</li>\n</ol>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226130917300.png\" alt=\"image-20220226130917300\" /></p>\n</blockquote>\n<h3 id=\"4-dcl数据控制语言用来创建数据库用户-控制数据库的访问权限\"><a class=\"anchor\" href=\"#4-dcl数据控制语言用来创建数据库用户-控制数据库的访问权限\">#</a> (4) <strong>DCL—— 数据控制语言，用来创建数据库用户、控制数据库的访问权限</strong></h3>\n<blockquote>\n<h3 id=\"1-管理用户\"><a class=\"anchor\" href=\"#1-管理用户\">#</a> 1、管理用户</h3>\n<ol>\n<li>查询用户</li>\n</ol>\n<pre><code class=\"language-SQL\">use mysql;\nselect *from user;\n</code></pre>\n<ol>\n<li>创建用户</li>\n</ol>\n<pre><code class=\"language-SQL\">create user '用户名'@'主机名' IDENTIFIED BY '密码'; \n</code></pre>\n<ol>\n<li>修改用户密码</li>\n</ol>\n<pre><code class=\"language-SQL\">alter user '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码';\n</code></pre>\n<p>4. 删除用户</p>\n<pre><code class=\"language-SQL\">drop user '用户名'@'主机名';\n</code></pre>\n<h2 id=\"2-权限管理\"><a class=\"anchor\" href=\"#2-权限管理\">#</a> 2、权限管理</h2>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226131018287.png\" alt=\"image-20220226131018287\" /></p>\n<ol>\n<li>查询权限</li>\n</ol>\n<pre><code class=\"language-SQL\">show grants for '用户名'@'主机名';\n2. 授予权限\ngrant 权限列表 on 数据库.表名 to '用户名'@'主机名'; \n3. 撤销权限\nrevoke 权限列表 on 数据库.表名 from '用户名'@'主机名';\n</code></pre>\n<ul>\n<li>多个权限之间，使用逗号分隔。</li>\n<li>授权时，数据库名和表名可以使用 * 进行通配，代表所有。</li>\n</ul>\n</blockquote>\n<h2 id=\"2-数据类型\"><a class=\"anchor\" href=\"#2-数据类型\">#</a> 2、数据类型</h2>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226131551577.png\" alt=\"image-20220226131551577\" /></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2xncWltZy5jaGFuZ3plci5jbi9pbWFnZS0yMDIyMDIyNjEzMTY0MzM3OC5wbmc=\">http://lgqimg.changzer.cn/image-20220226131643378.png</span>&quot; alt=&quot;image-20220226131643378&quot;  /&gt;</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226131716446.png\" alt=\"image-20220226131716446\" /></p>\n</blockquote>\n<h2 id=\"3-函数\"><a class=\"anchor\" href=\"#3-函数\">#</a> 3、函数</h2>\n<blockquote>\n<ul>\n<li>语法</li>\n</ul>\n<pre><code class=\"language-SQL\">select 函数(参数)；\n</code></pre>\n<h3 id=\"1-字符串函数\"><a class=\"anchor\" href=\"#1-字符串函数\">#</a> 1. 字符串函数</h3>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226131918060.png\" alt=\"image-20220226131918060\" /></p>\n<h3 id=\"2-数值函数\"><a class=\"anchor\" href=\"#2-数值函数\">#</a> 2. 数值函数</h3>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226131935009.png\" alt=\"image-20220226131935009\" /></p>\n<h3 id=\"3-日期函数\"><a class=\"anchor\" href=\"#3-日期函数\">#</a> 3. 日期函数</h3>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226131952830.png\" alt=\"image-20220226131952830\" /></p>\n<h3 id=\"4-流程函数\"><a class=\"anchor\" href=\"#4-流程函数\">#</a> 4. 流程函数</h3>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226132012231.png\" alt=\"image-20220226132012231\" /></p>\n</blockquote>\n<h2 id=\"4-约束\"><a class=\"anchor\" href=\"#4-约束\">#</a> 4、约束</h2>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226132324447.png\" alt=\"image-20220226132324447\" /></p>\n<ul>\n<li>外键约束</li>\n</ul>\n<blockquote>\n<ul>\n<li>添加外键</li>\n</ul>\n<pre><code class=\"language-SQL\">create table 表名(\n      字段名 数据类型,\n       ...\n       [constraint][外键名称] foreign key(外键字段名) references 主表(主表列名)\n);\nalter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表列名);\n</code></pre>\n<ul>\n<li>删除外键</li>\n</ul>\n<pre><code class=\"language-SQL\">alter table 表名 drop foreign key 外键名称;\n</code></pre>\n<ul>\n<li>删除 / 更新行为</li>\n</ul>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226132502323.png\" alt=\"image-20220226132502323\" /></p>\n<ul>\n<li>语法</li>\n</ul>\n<blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">add</span> <span class=\"token keyword\">constraint</span> 外键名称 <span class=\"token keyword\">foreign</span><span class=\"token punctuation\">(</span>外键字段<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> 主表名<span class=\"token punctuation\">(</span>主表字段名<span class=\"token punctuation\">)</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">update</span> 行为 <span class=\"token keyword\">on</span> <span class=\"token keyword\">delete</span> 行为<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"5-多表查询\"><a class=\"anchor\" href=\"#5-多表查询\">#</a> 5、多表查询</h2>\n<h3 id=\"51-多表关系\"><a class=\"anchor\" href=\"#51-多表关系\">#</a> 5.1 多表关系</h3>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226132958716.png\" alt=\"image-20220226132958716\" /></p>\n<ul>\n<li>一对多 (多对一)</li>\n</ul>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226133130710.png\" alt=\"image-20220226133130710\" /></p>\n</blockquote>\n<ul>\n<li>多对多</li>\n</ul>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226133149302.png\" alt=\"image-20220226133149302\" /></p>\n</blockquote>\n<ul>\n<li>一对一</li>\n</ul>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226133214313.png\" alt=\"image-20220226133214313\" /></p>\n</blockquote>\n</blockquote>\n<h3 id=\"52-多表查询概述\"><a class=\"anchor\" href=\"#52-多表查询概述\">#</a> 5.2 多表查询概述</h3>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226133344586.png\" alt=\"image-20220226133344586\" /></p>\n<ul>\n<li>多表查询分类</li>\n</ul>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226133422287.png\" alt=\"image-20220226133422287\" /></p>\n</blockquote>\n</blockquote>\n<h3 id=\"53内连接\"><a class=\"anchor\" href=\"#53内连接\">#</a> 5.3 内连接</h3>\n<blockquote>\n<p>内连接查询的是两张表交集的部分</p>\n<ul>\n<li>隐式内连接</li>\n</ul>\n<pre><code class=\"language-SQL\">select 字段列表 from 表1,表2 where 条件...;\n</code></pre>\n<ul>\n<li>显式内连接</li>\n</ul>\n<pre><code class=\"language-SQL\">select 字段列表 from 表1[inner] join 表2 on 连接条件...; \n</code></pre>\n</blockquote>\n<h3 id=\"54-外连接\"><a class=\"anchor\" href=\"#54-外连接\">#</a> 5.4 外连接、</h3>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226133657412.png\" alt=\"image-20220226133657412\" /></p>\n<ul>\n<li>左外连接</li>\n</ul>\n<pre><code class=\"language-SQL\">select 字段列表 from 表1 left [outer] join 表2 on 条件...;\n</code></pre>\n<ul>\n<li>右外连接</li>\n</ul>\n<pre><code class=\"language-SQL\">select 字段列表 from 表1 right [outer] join 表1 on 条件...;\n</code></pre>\n</blockquote>\n<h3 id=\"55-自连接\"><a class=\"anchor\" href=\"#55-自连接\">#</a> 5.5 自连接、</h3>\n<blockquote>\n<ul>\n<li>自连接查询法</li>\n</ul>\n<pre><code class=\"language-Sql\">select 字段列表 from 表A 别名A join 表A 别名B on 条件...;\n</code></pre>\n<ul>\n<li>自连接查询，可以是内连接查询，也可以是外连接查询.</li>\n</ul>\n</blockquote>\n<h3 id=\"56联合查询\"><a class=\"anchor\" href=\"#56联合查询\">#</a> 5.6 联合查询</h3>\n<blockquote>\n<ul>\n<li>对于 union 查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</li>\n<li>语法</li>\n</ul>\n<pre><code class=\"language-SQL\">select 字段列表 from 表A\nunion [all]\nselect 字段列表 from 表B;\n</code></pre>\n<ul>\n<li><strong>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</strong></li>\n<li><strong>union all 会将全部的数据直接合并在一起，union 会对合并之后的数据去重</strong></li>\n</ul>\n</blockquote>\n<h3 id=\"57-子查询\"><a class=\"anchor\" href=\"#57-子查询\">#</a> 5.7 子查询</h3>\n<blockquote>\n<ul>\n<li>\n<p>概念 :SQL 语句中嵌套 select 语句，称为嵌套查询，又称子查询</p>\n</li>\n<li>\n<p>语法</p>\n</li>\n</ul>\n<blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t1 <span class=\"token keyword\">where</span> column1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> column1 from2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>子查询外部的邮局可以是 insert/update/delete/select 的任何一个</strong></li>\n</ul>\n</blockquote>\n<ul>\n<li>分类</li>\n</ul>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226134245323.png\" alt=\"image-20220226134245323\" /></p>\n</blockquote>\n<ul>\n<li>标量子查询</li>\n</ul>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226134338321.png\" alt=\"image-20220226134338321\" /></p>\n</blockquote>\n<ul>\n<li>列子查询</li>\n</ul>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226134402934.png\" alt=\"image-20220226134402934\" /></p>\n</blockquote>\n<ul>\n<li>行子查询</li>\n</ul>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226134418954.png\" alt=\"image-20220226134418954\" /></p>\n</blockquote>\n<ul>\n<li>表子查询</li>\n</ul>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226134437994.png\" alt=\"image-20220226134437994\" /></p>\n</blockquote>\n</blockquote>\n<h2 id=\"6-事务\"><a class=\"anchor\" href=\"#6-事务\">#</a> 6、事务</h2>\n<blockquote>\n<ul>\n<li>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销请求，即这些操作要么同时成功，要么同时失败。</li>\n</ul>\n<ul>\n<li>\n<p>事务操作</p>\n</li>\n<li>\n<p>查看 / 设置事务提交方式</p>\n<blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> @<span class=\"token variable\">@autocomit</span><span class=\"token punctuation\">;</span><span class=\"token comment\">-- 查看事务提交方式，1 为自动提交，0 为手动提交</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span> @<span class=\"token variable\">@sutiocomit</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">-- 设置提交方式，0 为手动提交</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li>\n<p>提交事务</p>\n<blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">commit</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li>\n<p>回滚事务</p>\n<blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">rollback</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>开启事务</li>\n</ul>\n<blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">start</span> <span class=\"token keyword\">transaction</span> 或 <span class=\"token keyword\">begin</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>事务的四大特性</li>\n</ul>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226135459363.png\" alt=\"image-20220226135459363\" /></p>\n</blockquote>\n<ul>\n<li>并发事务问题</li>\n</ul>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226135518825.png\" alt=\"image-20220226135518825\" /></p>\n</blockquote>\n<ul>\n<li>事务隔离级别</li>\n</ul>\n<blockquote>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220226135534240.png\" alt=\"image-20220226135534240\" /></p>\n<ul>\n<li>\n<p>查看事务隔离级别</p>\n<blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> @<span class=\"token variable\">@transaction_isolation</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li>\n<p>设置事务隔离级别</p>\n<blockquote>\n<pre><code class=\"language-SQL\">set [session|global] transaction isolation level &#123;read uncommitted|read committed|repeatable read|serializable&#125;;\n--session表示会话级别，表示当前客户端窗口有效\n--session global 表示所有客户端窗口有效\n</code></pre>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</blockquote>\n",
            "tags": [
                "MySQL",
                "数据库"
            ]
        },
        {
            "id": "https://maplelearc.github.io/2022/10/03/%E3%80%8ACS%E5%9B%BE%E8%A7%A3%E6%95%99%E7%A8%8B%E3%80%8B%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BF%86%E7%82%B9/",
            "url": "https://maplelearc.github.io/2022/10/03/%E3%80%8ACS%E5%9B%BE%E8%A7%A3%E6%95%99%E7%A8%8B%E3%80%8B%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BF%86%E7%82%B9/",
            "title": "《C#图解教程》阅读记忆点",
            "date_published": "2022-10-03T07:00:03.631Z",
            "content_html": "<h1 id=\"c图解教程阅读记忆点\"><a class=\"anchor\" href=\"#c图解教程阅读记忆点\">#</a> 《C# 图解教程》阅读记忆点</h1>\n<h2 id=\"一-数据类型\"><a class=\"anchor\" href=\"#一-数据类型\">#</a> 一、数据类型</h2>\n<h3 id=\"1-栈和堆\"><a class=\"anchor\" href=\"#1-栈和堆\">#</a> 1. 栈和堆</h3>\n<ol>\n<li>\n<p>栈<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220913201351108.png\" alt=\"image-20220913201351108\" /></p>\n</li>\n<li>\n<p>堆</p>\n</li>\n</ol>\n<ul>\n<li>堆是一块内存区域，在堆里可以分配大块的内存用于存储某种类型的数据对象。堆中的内存能够以任意顺序存入和移除.</li>\n<li>CLR 的自动垃圾收集器在判断出程序的代码不在访问某项数据时，会自动清除无主的堆对象.<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220913201848664.png\" alt=\"image-20220913201848664\" /></li>\n</ul>\n<h3 id=\"2-值类型和引用类型\"><a class=\"anchor\" href=\"#2-值类型和引用类型\">#</a> 2. 值类型和引用类型</h3>\n<ul>\n<li>C# 中数据分为值类型和引用类型。这两种类型的对象在内存中的存储方式不同</li>\n<li>值类型只需要一段单独的内存，它总是位于堆中。</li>\n<li>引用类型需要两段内存。第一段存储的实际数据总是存储在堆中。第二段的是一个引用，指向数据在堆中的从存放位置。<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220913200717360.png\" alt=\"image-20220913200717360\" /></li>\n<li><img data-src=\"http://lgqimg.changzer.cn/image-20220913205013024.png\" alt=\"image-20220913205013024\" /></li>\n</ul>\n<h3 id=\"3-嵌套快中的局部变量\"><a class=\"anchor\" href=\"#3-嵌套快中的局部变量\">#</a> 3. 嵌套快中的局部变量</h3>\n<ul>\n<li>可以有任意数量的块，并且他们既可以是顺序的也可以是嵌套的。块可以嵌套到任何级别.</li>\n<li>局部变量可以在嵌套块的内部声明，并且和所有的局部变量一样，他们的生存期和可见性仅局限与声明它们的块及其内嵌快.<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220913204838044.png\" alt=\"image-20220913204838044\" /></li>\n</ul>\n<h2 id=\"二-方法\"><a class=\"anchor\" href=\"#二-方法\">#</a> 二、方法</h2>\n<h3 id=\"1-方法的引用参数和值参数\"><a class=\"anchor\" href=\"#1-方法的引用参数和值参数\">#</a> 1. 方法的引用参数和值参数</h3>\n<p>1. 值参数</p>\n<ul>\n<li>\n<p>在方法使用值参数，在方法被调用时，系统在栈中为形参分配空间，并将实参的值赋值给形参。</p>\n<pre><code class=\"language-c#\">calss MyCalss\n&#123;\n    public int Val=20;\n&#125;\n\ncalss Program\n&#123;\n    static void MyMethod(MyCalss f1,int f2)\n    &#123;\n        f1.Val=f1.Val+5;\n        f2=f2+5;\n        ConSole.WriteLine($&quot;f1.Val:&#123;f1.Val&#125;，f2:&#123;f2&#125;&quot;);\n    &#125;\n\n    static void Main()\n    &#123;\n        MyClass a1=new MyClass();\n        int a2 = 10;\n\n        MyMethod(a1,a2);\n        ConSole.WriteLine($&quot;a1.Val:&#123;a1.Val&#125;，a2:&#123;a2&#125;&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>结果输出为</p>\n<pre><code class=\"language-c#\">f1.Val:&#123;25&#125;，f2:&#123;15&#125;\na1.Val:&#123;25&#125;，a2:&#123;10&#125;\n</code></pre>\n<p>结果表示：</p>\n<ul>\n<li>在方法被调用前，用作实参的变量 a2 已经在栈里面了。</li>\n<li>在方法开始时，系统在栈中为形参分配空间，并从实参复制值。\n<ul>\n<li>因为 a1 是引用类型的，所以引用被复制，结果实参和形参都引用堆中的同一数据。</li>\n<li>因为 a2 是值类型的，所以值被复制，产生了一个独立的数据项。</li>\n</ul>\n</li>\n<li>在方法的结尾，f2 和对象 f1 的字段都被加上了 5.\n<ul>\n<li>方法执行后，形参从栈出弹出。</li>\n<li>a2，值类型，它的值不受方法行为的影响。</li>\n<li>a1，引用类型，但它的值被方法的行为改变了。</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220913213459760.png\" alt=\"image-20220913213459760\" /></p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>引用参数</li>\n</ol>\n<ul>\n<li>\n<p>使用引用参数时，必须在方法的声明和调和中都使用<strong> ref</strong> 修饰符。</p>\n</li>\n<li>\n<p>实参必须是变量，在用作实参前必须被赋值。如果是引用类型变量，可以赋值为一个引用或<strong> null</strong>。</p>\n</li>\n<li>\n<p>方法使用引用参数时，系统不会再栈上位形参分配内存，形参的参数名将作为实参变量名，指向相同的内存位置。</p>\n</li>\n</ul>\n<pre><code class=\"language-c#\">  calss MyCalss\n  &#123;\n      public int Val=20;\n  &#125;\n\n  calss Program\n  &#123;\n      static void MyMethod(ref MyCalss f1,ref int f2)\n      &#123;\n          f1.Val=f1.Val+5;\n          f2=f2+5;\n          ConSole.WriteLine($&quot;f1.Val:&#123;f1.Val&#125;，f2:&#123;f2&#125;&quot;);\n      &#125;\n\n      static void Main()\n      &#123;\n          MyClass a1=new MyClass();\n          int a2 = 10;\n\n          MyMethod(ref a1,ref a2);\n          ConSole.WriteLine($&quot;a1.Val:&#123;a1.Val&#125;，a2:&#123;a2&#125;&quot;);\n      &#125;\n  &#125;\n</code></pre>\n<p>结果输出为：</p>\n<pre><code class=\"language-c#\">f1.Val:&#123;25&#125;，f2:&#123;15&#125;\na1.Val:&#123;25&#125;，a2:&#123;15&#125;\n</code></pre>\n<p>结果表示：</p>\n<ul>\n<li>\n<p>在方法调用前，将要被用作实参的便改良 a1 和 a2 已经栈里了。</p>\n</li>\n<li>\n<p>在方法的开始，形参名被设置位实参的别名。变量 a1 和 f1 引用相同的内存位置，a2 和 f2 引用相同的内存位置。</p>\n</li>\n<li>\n<p>在方法的结束位置，f2 和 f1 的对象的字段都被加上了 5。</p>\n</li>\n<li>\n<p>方法被执行后，形参的名称已经失效，但是值类型 a2 的值和引用类型 a1 所指向的对象的值都被方法内的行为改变了。</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220913215058035.png\" alt=\"image-20220913215058035\" /></p>\n</li>\n</ul>\n<h3 id=\"2-引用类型作为值参数和引用参数\"><a class=\"anchor\" href=\"#2-引用类型作为值参数和引用参数\">#</a> 2. 引用类型作为值参数和引用参数</h3>\n<ol>\n<li>引用类型作为值参数</li>\n</ol>\n<ul>\n<li>\n<p>将引用类型对象作为值参数传递如果在方法内创建一个新对象并赋值给形参，将切断形参与实参之间的关联，并且在方法调用结束后，新对象也将不复存在。</p>\n<pre><code class=\"language-c#\">class MyClass&#123;\n    public int Val = 20;\n&#125;\nclass Program\n&#123;\n    static void ReFAsParameter(MyClass f1)\n    &#123;\n        f1.Val = 50;\n        Console.WriteLine($&quot;After member assignment：&#123;f1.Val&#125;&quot;);\n        f1=new MyClass();\n        Console.WriteLine($&quot;After new object cretion：&#123;f1.Val&#125;&quot;);\n    &#125;\n\n    static void Main()\n    &#123;\n        MyClass a1 = new MyClass();\n\n        Console.WriteLine($&quot;Before method call：&#123;a1.Val&#125;&quot;);\n        ReFAsParameter(a1);\n        Console.WriteLine($&quot;After method call：&#123;a1.Val&#125;&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>结果为：</p>\n<pre><code class=\"language-c#\">Before method call：20\nAfter member assignment：50\nAfter new object cretion：20\nAfter method call：50\n</code></pre>\n<p>结果表明：</p>\n<ul>\n<li>\n<p>在方法开始时，实参和形参指向堆中的相同对象</p>\n</li>\n<li>\n<p>在位对象成员赋值之后，他们仍指向堆中相同的对象</p>\n</li>\n<li>\n<p>当方法分配新的对象并复制给形参时，方法外部的实参仍指向原时对象，而形参指向的是新对象</p>\n</li>\n<li>\n<p>在方法调用之后，实参指向原时对象，形参和新对象都会消失</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220913221643242.png\" alt=\"image-20220913221643242\" /></p>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>引用类型作为引用参数</li>\n</ol>\n<ul>\n<li>\n<p>将引用类型对象作为引用参数传递如果在方法内创建一个新对象并赋值给形参，在方法结束后该对象依然存在，并且是实参所引用的值。</p>\n<pre><code class=\"language-c#\">class MyClass&#123;\n    public int Val = 20;\n&#125;\nclass Program\n&#123;\n    static void ReFAsParameter(ref MyClass f1)\n    &#123;\n        f1.Val = 50;\n        Console.WriteLine($&quot;After member assignment：&#123;f1.Val&#125;&quot;);\n        f1=new MyClass();\n        Console.WriteLine($&quot;After new object cretion：&#123;f1.Val&#125;&quot;);\n    &#125;\n\n    static void Main()\n    &#123;\n        MyClass a1 = new MyClass();\n\n        Console.WriteLine($&quot;Before method call：&#123;a1.Val&#125;&quot;);\n        ReFAsParameter(ref a1);\n        Console.WriteLine($&quot;After method call：&#123;a1.Val&#125;&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>结果为：</p>\n<pre><code class=\"language-c#\">Before method call：20\nAfter member assignment：50\nAfter new object cretion：20\nAfter method call：20\n</code></pre>\n<p>结果表示：</p>\n<ul>\n<li>在方法调用时，形参和实参指向堆中相同的对象。</li>\n<li>对成员值的修改会同时影响到形参和实参。</li>\n<li>当方法创建新的对象并赋值给形参时，形参和实参的引用都指向该新对象。</li>\n<li>在方法结束后，实参指向在方法内创建的新对象<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220913221820856.png\" alt=\"image-20220913221820856\" /></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-输出参数\"><a class=\"anchor\" href=\"#3-输出参数\">#</a> 3. 输出参数</h3>\n<ol>\n<li>\n<p>输出参数用于从方法体内把数据传出到调用代码，他们的行为与引用参数类似。如同引用参数，输出参数有以下要求：</p>\n<ul>\n<li>\n<p>必须声明和调用中都使用修饰符。输出参数的修饰符是<strong> out</strong>。</p>\n</li>\n<li>\n<p>和引用参数相似，实参必须是变量，而不能是其他类型的表达式。因为方法需要内存位置来保存返回值。<br />\n例子：</p>\n<pre><code class=\"language-C#\">void MyMethod(out int val)&#123;&#125;\n...\nint y = 1;\nMyMethod(out y );\n</code></pre>\n</li>\n<li>\n<p>输出参数的形参充当实参的别名。形参与实参都是同一块内存位置的名称。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>输出参数规则</p>\n<ul>\n<li>在方法内部，给输出参数赋值之后才能读取它。这意味着参数的初始值的无关的，而且没有必要再方法调用之前为实参赋值。</li>\n<li>在方法内部，再方法返回之前，代码中每条可能的路径都必须为所有输出参数赋值。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-参数数组\"><a class=\"anchor\" href=\"#4-参数数组\">#</a> 4. 参数数组</h3>\n<ol>\n<li>\n<p>参数数组允许特定的零个或多个实参定义一个特定的形参。</p>\n<ul>\n<li>\n<p>一个参数列表中只能有一个参数列表</p>\n</li>\n<li>\n<p>如果有，它必须是列表中的最后一个</p>\n</li>\n<li>\n<p>有参数数组表示的所有参数必须是同一个类型的</p>\n</li>\n<li>\n<p>声明参数数组时，必须：</p>\n<ul>\n<li>\n<p>在数据类型前使用<strong> params</strong> 修饰符</p>\n</li>\n<li>\n<p>再数据后放置空的方括号</p>\n<pre><code class=\"language-c#\">void ListInit(params int[] inVals)&#123;&#125;;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>方法调用</p>\n<ul>\n<li>\n<p><strong>可以使用一个用逗号分隔的相应数据类型的列表。<strong>被称为</strong>延伸式</strong>可在调用中使用独立的实参。</p>\n<pre><code class=\"language-c#\">ListInit(1,2,3,4);\n</code></pre>\n<ul>\n<li>在使用一个参数数组使用独立参数的调用时，编译器会执行：\n<ol>\n<li>接受参数列表，用它们在堆中创建并初始化一个数组。</li>\n<li>把数组的引用报存到栈中的形参里。</li>\n<li>如果在对应形参数组的位置没有实参，编译器会创建一个有零个元素的数组使用</li>\n</ol>\n</li>\n<li>如果数组参数是值类型，那么值被复制，实参在方法内部不受影响。如果数组参数是引用类型，那么引用被复制，实参引用的对象在方祛内部会受到影响。</li>\n</ul>\n</li>\n<li>\n<p><strong>一个相应数据类型的一维数组。</strong></p>\n<pre><code class=\"language-c#\">int[] intArrary=&#123;1,2,3,4&#125;;\nListInit(intArrary);\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"5-ref局部变量和ref返回\"><a class=\"anchor\" href=\"#5-ref局部变量和ref返回\">#</a> 5. <em>ref</em> 局部变量和<em> ref</em> 返回</h3>\n<ol>\n<li>\n<p><strong>ref</strong> 局部变量</p>\n<ul>\n<li>ref 局部变量可以创建一个变量的别名，即引用的对象是值类型。</li>\n<li>对任意一个变量的赋值都会反映到另一个变量上。因为两个的引用对象是相同的，即使是值类型也如此。</li>\n</ul>\n<pre><code class=\"language-c#\">ref int y =ref x; //创建int变量x，别名为y\n</code></pre>\n</li>\n<li>\n<p><strong>ref</strong> 返回</p>\n<ul>\n<li>\n<p>使用 ref 返回，也要使用两次<strong> ref</strong> 关键字：</p>\n<ul>\n<li>一次是在方法的返回类型声明之前</li>\n<li>另一次是在 return 关键字之后，被返回对象的变量名之前</li>\n</ul>\n<pre><code class=\"language-c#\">private int Val;\npublic ref int RefToVal(int val)\n&#123;\n    return ref Val;\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>限制</p>\n<ul>\n<li>\n<p>返回值为 void 的方法无法声明为<strong> ref</strong> 返回方法</p>\n</li>\n<li>\n<p><strong>ref return</strong> 表达式无法返回以下内容：</p>\n<ul>\n<li>空值</li>\n<li>常量</li>\n<li>枚举成员</li>\n<li>类或结构体的属性</li>\n<li>指向只读位置的指针</li>\n</ul>\n</li>\n<li>\n<p><strong>ref return</strong> 表达式只能指向原先就在调用域内的位置，或者字段。所以无法指向方法的局部变量。</p>\n</li>\n<li>\n<p><strong>ref</strong> 局部变量只能被赋值一次。一旦被初始化，就无法指向不同的存储位置了。</p>\n</li>\n<li>\n<p>即使将一个方法声明为<strong> ref</strong> 返回方法，如果在调用该方法时省略了<strong> ref</strong> 关键字，则返回的<br />\n将是值，而不是指向值的内存位置的指针。</p>\n</li>\n<li>\n<p>如果将<strong> ref</strong> 局部变量作为常规的实际参数传递给其他方法，则该方法仅获取该变量的一个<br />\n副本。尽管<strong> ref</strong> 局部变量包含指向存储位置的指针，但是当以这种方式使用时，它会传递<br />\n值而不是引用。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"6-命名参数\"><a class=\"anchor\" href=\"#6-命名参数\">#</a> 6. 命名参数</h3>\n<ol>\n<li>\n<p>在调用方法时，形参的名字后面跟着冒号和实际的参数表达式或参数值。</p>\n<pre><code class=\"language-c#\">class MyClass\n&#123;\n    public int Calc(int a,int b,int c)&#123;return a+b+c&#125;;\n\n    static void Main()\n    &#123;\n        MyClass mc = new MyClass();\n        int ro mc.Calc(4,3,2 )//位置参数\n\t\tint r1 mc.Calc(4,b:3,c:2 )//位置参数和命名参数\n\t\tint r2 mc.Calc(4,c:2,b:3 )//交换了顺序\n\t\tint r3 mc.Calc(c:2,b:3,a:4);//所有都是命名参数\n\t\tint r4=mc.Calc(c:2,b:1+2,a:3+1);//命名参数表达式\n\n        Console.WriteLine(&quot;&#123;r0&#125;,&#123;r1&#125;,&#123;r2&#125;,&#123;r3&#125;,&#123;r4&#125;&quot;);\n    &#125;\n&#125;\n\n</code></pre>\n<p>结果为</p>\n<pre><code class=\"language-c#\">14,14,14,14,14\n</code></pre>\n<ul>\n<li>命名参数对于自描述的程序来说很有用，因为我们可以在方法调用的时候显示哪个值赋给哪个形参。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"7-可选参数\"><a class=\"anchor\" href=\"#7-可选参数\">#</a> 7. 可选参数</h3>\n<ol>\n<li>\n<p>可选参数就是可以在调用方法的时候包含这个参数，也可以省略它。</p>\n<pre><code class=\"language-c#\">class MyClass\n&#123;\n    public int Clac(int a,int b=3)\n    &#123;\n        return a+b;\n    &#125;\n\n    static void Main()\n    &#123;\n        MyClass mc = new MyClass();\n\n        int r0=mc.Clac(5,6);\n        int r1=mc.Clac(5);\n\n        Console.WriteLine(&quot;&#123;r0&#125;,&#123;r1&#125;&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>结果：</p>\n<pre><code class=\"language-c#\">11,8\n</code></pre>\n<p>在代码中：</p>\n<ul>\n<li>形参 b 的默认值为 3。</li>\n<li>如果调用方法的时候只有一个参数，方法会使用 3 作为的二个参数的初始值。</li>\n</ul>\n</li>\n<li>\n<p>可选参数的声明限制</p>\n<ul>\n<li>不是所有的参数类型都可以作为可选参数。\n<ul>\n<li>只要值类型的默认值在编译的时候可以确定，就可以使用值类型作为可选类型</li>\n<li>只有在默认值是 null 的时候，引用类型才可以用作可选参数<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220915192549731.png\" alt=\"\" /></li>\n</ul>\n</li>\n<li>所有必填参数必须在可选参数声明之前声明。如果有<strong> params</strong>，必须在所有可选参数之后声明。<img data-src=\"http://lgqimg.changzer.cn/image-20220915193352286.png\" alt=\"image-20220915193352286\" /></li>\n</ul>\n</li>\n<li>\n<p>可选参数省略：</p>\n<ul>\n<li>必须从可选参数列表的最后开始省略，一直到列表开头。</li>\n<li>可以省略最后一个可选参数，或是最后 n 个可选参数，但是不饿能随意选择省略任意的可选参数，省略必须从最后开始。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"8-栈帧\"><a class=\"anchor\" href=\"#8-栈帧\">#</a> 8. 栈帧</h3>\n<ol>\n<li>在调用方法的时候，内存从栈的顶部开始分配，保存和方法关联的一些数据项。这块内存叫作方法的栈帧 (stack frame)。\n<ul>\n<li>栈帧保存内容：\n<ul>\n<li>返回地址，也就是在方法退出的时候继续执行的位置。</li>\n<li>分配内存的的参数，也就是方法的值参数，还可能是参数数组 (如果有的话)。</li>\n<li>和方法调用相关的其他管理数据项。</li>\n</ul>\n</li>\n<li>在方法调用时，整个栈帧都会压入栈。</li>\n<li>在方法退出时，整个栈帧都会从栈上弹出。弹出栈帧有的时候也叫作栈展开 (unwind)。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"三-深入理解类\"><a class=\"anchor\" href=\"#三-深入理解类\">#</a> 三、深入理解类</h2>\n<h3 id=\"1-静态字段\"><a class=\"anchor\" href=\"#1-静态字段\">#</a> 1. 静态字段</h3>\n<ol>\n<li>\n<p>静态字段被类的所有实例共享，所有实例都访问同一内存位置因此，如果该内存位置的值被一个实例改变了，这种改变对所有的实例都可见。</p>\n</li>\n<li>\n<p>使用<strong> static</strong> 修饰符将字段声明为静态。</p>\n</li>\n<li>\n<p>从类外访问静态不需要使用类实例前缀可以使用类型和点运算符来访问静态成员，或是在该成员所属类中包含一个 using static 声明。</p>\n<pre><code class=\"language-c#\">using static System.Console; //在其他成员中包含WriteLine()\nclass D\n&#123;\n    int Mem1;\n    static int Mem2;\n&#125;\n\nclass C\n&#123;\n    static void Main()\n    &#123;\n        D.Mem2=5;\n    &#125;\n\n&#125;\n\n</code></pre>\n</li>\n<li>\n<p>静态字段的生存期</p>\n<ul>\n<li>即使类没有实例，静态成员也存在并且可以访问。</li>\n<li>如果静态字段有生存周期，那么会在使用该类的任何静态成员之前初始化该字段，但不一定在程序执行的开始就初始化。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-静态函数成员\"><a class=\"anchor\" href=\"#2-静态函数成员\">#</a> 2. 静态函数成员</h3>\n<ol>\n<li>\n<p>静态成员如同静态字段，独立于任何类实例。即使没有类实例，任然可以调用静态方法。</p>\n</li>\n<li>\n<p>静态函数成员不能访问实例成员，但能访问其他静态成员。</p>\n<pre><code class=\"language-c#\">class X\n&#123;\n    static public int A;\n    static public void PrintValA()\n    &#123;\n        COnsole.WriteLine(&quot;Value of A:&#123;0&#125;&quot;,A);\n    &#125;\n&#125;\n\nclass Program\n&#123;\n    static void Main()\n    &#123;\n        X.A=10;\n        X.PrintValA();\n    &#125;\n&#125;\n</code></pre>\n<p>结果：</p>\n<pre><code class=\"language-c#\">Value of A:10\n</code></pre>\n</li>\n<li>\n<p>其他静态成员类型<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220915204231609.png\" alt=\"image-20220915204231609\" /></p>\n</li>\n</ol>\n<h3 id=\"3-成员常量\"><a class=\"anchor\" href=\"#3-成员常量\">#</a> 3. 成员常量</h3>\n<ol>\n<li>\n<p>与局部常量类似，用于初始化成员常量的值在编译时必须时可计算的，而且通常时一个预定义简单类型或由他们组成表达式。</p>\n<pre><code class=\"language-c#\">class MyClass\n&#123;\n    const int IntVal1=100;\n    const int InVal2=2*IntVal1;  //IntVal1已经初始化\n&#125;\n</code></pre>\n<pre><code class=\"language-c#\">class MyClass\n&#123;\n    const int IntVal1;   //错误：必须初始化\n    IntVal1=100;         //错误：不允许赋值\n&#125;\n</code></pre>\n<ul>\n<li>C# 中没有全局常量。每个常量都必须声明在类型内。</li>\n</ul>\n</li>\n<li>\n<p>常量与静态量</p>\n<ul>\n<li>成员常量像静态量一样，不需要使用类的实例就可以访问。</li>\n<li>与真正的静态两不同，常量没有自己的存储位置，而是在编译器时被编译器替换。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-属性\"><a class=\"anchor\" href=\"#4-属性\">#</a> 4. 属性</h3>\n<ol>\n<li>\n<p>属性时代表类实例或类中的数据项的成员。使用属性就像写入或读取一个字段，语法相同。</p>\n<pre><code class=\"language-c#\">MyClass mc = new MyClass();\n\nmc.Filed = 5;          //给字段赋值\nmc. MyProperty = 10;   //该属性赋值\n</code></pre>\n</li>\n<li>\n<p>属性与字段类似，属性有以下特征：</p>\n<ul>\n<li>是命名的类成员。</li>\n<li>有类型。</li>\n<li>可以被赋值和读取。</li>\n</ul>\n<p>和字段不相同，属性是一个成员函数</p>\n<ul>\n<li>它不一定为数据存储分配内存</li>\n<li>它执行代码</li>\n</ul>\n</li>\n<li>\n<p>属性是一组 (两个) 匹配的、命名的、成为访问器的方法。</p>\n<ul>\n<li>\n<p><strong>set</strong> 访问器为属性赋值</p>\n</li>\n<li>\n<p><strong>get</strong> 访问器从属性获取值</p>\n<p>int 类型名称为 MyValue 的属性展示：</p>\n<pre><code class=\"language-c#\">int MyValue\n&#123;\n    set\n    &#123;\n        SetAccessorCode\n    &#125;\n    get\n    &#123;\n        GetAccessorCode\n    &#125;\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>属性声明和访问器</p>\n<ul>\n<li>\n<p>set 和 get 访问器有预定义的语法和语义。可以把 set 访问器想象成一个方法，带有单一的参数，它 “设置” 属性的值。get 访问器没有参数并从属性返回一个值。</p>\n</li>\n<li>\n<p><strong>set</strong> 访问器总是：</p>\n<ul>\n<li>拥有一个单独的、隐式的值参，名称为 Value，与属性的类型相同。</li>\n<li>拥有一个返回类型 void。</li>\n</ul>\n</li>\n<li>\n<p><strong>get</strong> 访问器总是：</p>\n<ul>\n<li>没有参数。</li>\n<li>拥有一个与属性类型相同的返回类型。</li>\n</ul>\n</li>\n<li>\n<p>属性结构声明 (访问器声明既没有显式的参数，也没有返回类型声明，已经隐含在属性中)<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220915213845985.png\" alt=\"image-20220915213845985\" /></p>\n<p>set 访问器中的隐式参数 value 是一个普通的值参。和其他值参一样，可以用它发送数据到方法体或访问器块。在块的内部，可以像普通变量那样使用 value, 包括对它赋值。</p>\n</li>\n<li>\n<p>访问器的其他要点：</p>\n<ul>\n<li><strong>get</strong> 访问器的所有执行路径必须包含一条<strong> return</strong> 语句，它返回一个属性类型的值。</li>\n<li>访问器<strong> set</strong> 和<strong> get</strong> 可以以任何顺序声明，并且，除了这两个访问器外，属性上不允许有其他方法。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>属性示例</p>\n<ul>\n<li>\n<p>属性本身没有任何存储。取而代之，访问器决定如何处理发送进来的数据。以及将什么数据发送出去。在这种情况下，属性使用一个名为 TheRealValue 的字段作为存储。</p>\n</li>\n<li>\n<p><strong>set</strong> 访问器接受它的输入参数 value，并把它的值赋给字段 TheRealValue。</p>\n</li>\n<li>\n<p><strong>get</strong> 访问器只是返回字段 TheRealValue 的值。</p>\n<pre><code class=\"language-c#\">class C1\n&#123;\n    private int theRealValue;       //字段：发配内存\n \n    public int MyValue\n    &#123;\n        set&#123;theRealValue=value;&#125;    //属性：未分配内存\n        get&#123;return theRealValue;&#125;\n    &#125;\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>使用属性</p>\n<ul>\n<li>\n<p>要写入一个属性，在赋值语句的左边使用属性的名称。</p>\n</li>\n<li>\n<p>要读取一个属性，把属性的名称用在表达式中。</p>\n<pre><code class=\"language-c#\">int MyValue      //属性声明\n&#123;\n    set&#123;……&#125;\n    get&#123;……&#125;\n&#125;\n \nMyValue=5;       //赋值：隐式调用set方法，MyValue为属性名称\nz=MyValue;       //表达式：隐式调用get方法\n</code></pre>\n<ul>\n<li>不能显示地调用访问器<pre><code class=\"language-c#\">y =Myvalue.get();  //错误！不能显式调用t访问器\nMyValue.set(5);   //错误！不能显式调用set访问器\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>属性和字段关联</p>\n<ul>\n<li>一个常见的方式是在类中将字段声明为<strong> private</strong> 以封装字段，并声明一个 public 属性来控制从类外部对该字段的访问。和属性关联的字段常被称为后备字段或后备存储</li>\n<li>属性访问器并不局限于对关联的后备字段传进传出数据。访问器 get 和 set 能执行任何计算，也可以不执行任何计算。唯一必需的行为是 get 访问器要返回一个属性类型的值。</li>\n</ul>\n</li>\n<li>\n<p>只读和只写属性</p>\n<ol>\n<li>要想不定义属性的某个访问器，可以忽略访问器的声明。\n<ul>\n<li>只有 get 访问器的属性称为只读属性。只读属性能够安全地将一个数据项从类或类的实例中传出，而不必让调用者修改属性值。</li>\n<li>只有 set 访问器的属性称为只写属性。只写属性很少见，因为它们几乎没有实际用途。如果想在赋值时触发一个副作用，应该使用方法而不是属性。</li>\n<li>两个访问器中至少有一个必须定义，否则编译器会产生一条错误消息。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>属性和共有字段</p>\n<p>属性比共有字段更好</p>\n<ul>\n<li>属性是函数成员而不是数据成员，允许处理输入和输出，而共有字段不行。</li>\n<li>属性可以只读或只写，而字段不行。</li>\n<li>编译后的变量和编译后的属性语义不同。</li>\n</ul>\n</li>\n<li>\n<p>自动实现属性</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>因为属性经常被关联到后备字段，所以 C# 提供了自动实现属性 (automatically implemented property 或 auto-implemented property, 常简称为 “自动属性”，auto-property), 允许只声明属性而不声明后备字段。编译器会为你创建隐藏的后备字段，并且自动挂接到 gt 和 st 访问器上。</p>\n</li>\n<li>\n<p>自动实现属性有以下要点：</p>\n<ul>\n<li>不声明后备字段 —— 编译器根据属性的类型分配存储。</li>\n<li>不能提供访问器的方法体一它们必须被简单地声明为分号。get 担当简单的内存读，set 担当简单的写。但是，因为无法访问自动属性的方法体，所以在使用自动属性时调试代码通常会更加困难。</li>\n</ul>\n<pre><code class=\"language-c#\">class C1\n&#123;\n    public int MyValue\n    &#123;\n        set;\n        get;\n    &#125;\n&#125;\n</code></pre>\n</li>\n</ul>\n<ol start=\"11\">\n<li>\n<p>静态属性</p>\n<ol>\n<li>属性也可以声明为<strong> static</strong>。静态属性的访问器和所有静态成员一样，具有以下特点 “\n<ul>\n<li>不能访问类的实例成员，但能被实例成员访问。</li>\n<li>不管类是否有实例，他们都是存在的。</li>\n<li>在类的内部，可以仅使用名称来引用静态属性。</li>\n<li>在类的外部，可以通过类型或者使用<strong> using static</strong> 结构来引用静态属性。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"5静态构造函数\"><a class=\"anchor\" href=\"#5静态构造函数\">#</a> 5. 静态构造函数</h3>\n<ol>\n<li>构造函数也可以声明为 static。实例构造函数初始化类的每个新实例，而 static 构造函数初始化类级别的项。通常，静态构造函数初始化类的静态字段。\n<ul>\n<li>初始化类级别的项。\n<ul>\n<li>在引用任何静态成员之前。</li>\n<li>在创建类的任何实例之前。</li>\n</ul>\n</li>\n<li>静态构造函数在以下方面与实例构造函数类似。\n<ul>\n<li>静态构造函数的名称必须和类名相同。</li>\n<li>构造函数不能返回值。</li>\n</ul>\n</li>\n<li>静态构造函数在以下方面和实例构造函数不同。\n<ul>\n<li>静态构造函数声明中使用<strong> static</strong> 关键字。</li>\n<li>类只能由一个静态构造函数，而且不能带参数。</li>\n<li>静态构造函数不能有修饰符。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"6-对象初始化和析构函数\"><a class=\"anchor\" href=\"#6-对象初始化和析构函数\">#</a> 6. 对象初始化和析构函数</h3>\n<ol>\n<li>\n<p>对象初始化</p>\n<ul>\n<li>对象化初始化语法有两种。一种形式包括构造函数的参数列表，另一种不包括。</li>\n<li>对象初始化内容：\n<ul>\n<li>创建对象的代码能够访问要初始化的字段和属性。</li>\n<li>初始化发生在构造方法执行之后，因此在构造方法中设置的值可能会在之后对象初始化中重置为相同或不同的值。</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-c#\">public class Point\n&#123;\n    public int X=1;\n    public int y=2;\n\n    class Program\n    &#123;\n        static void Main()\n        &#123;\n            Point pt1=new Point();\n            Point pt2=new Point &#123;X=5,y=6&#125;;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<p>析构函数</p>\n<p>析构函数 (destructor) 执行在类的实例被销毁之前需要的清理或释放非托管资源的行为。非托管资源是指通过 Win32API 获得的文件句柄，或非托管内存块。使用 NET 资源是无法得到它们的，因此如果坚持使用正 T 类，就不需要为类编写析构函数。</p>\n</li>\n</ol>\n<h3 id=\"7-readonly修饰符\"><a class=\"anchor\" href=\"#7-readonly修饰符\">#</a> 7. <strong>readonly</strong> 修饰符</h3>\n<ol>\n<li>字段使用<strong> readonly</strong> 修饰符声明，其作用类似于将字段声明为 const，一旦被设定就不能在改变。\n<ul>\n<li>const 字段只能在字段的声明语句中初始化，而 readonly 字段可以在下列任意位置设置它的值。\n<ul>\n<li>字段声明语句，类似于 const。</li>\n<li>类的任何构造函数。如果是 static 字段，初始化必须在静态构造函数中完成。</li>\n</ul>\n</li>\n<li>const 字段的值必须可在编译时决定，而 readonly 字段的值可以在运行时决定。这种自由性允许你在不同的环境或不同的构造函数中设置不同的值。</li>\n<li>const 的行为总是静态的，而对于 readonly 字段以下两点是正确的。\n<ul>\n<li>它可以是实例字段，也可以是静态字段。</li>\n<li>它在内存中有存储位置。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"8-索引器\"><a class=\"anchor\" href=\"#8-索引器\">#</a> 8. 索引器</h3>\n<ol>\n<li>\n<p>假设我们要定义一个类 Employee, 它带有 3 个 string 型字段，那么可以使用字段的名称方间们加 Main 中的代码所示</p>\n<pre><code class=\"language-c#\">class Employee\n&#123;\n    public string LastName;\n\tpublic string FirstName;\n\tpublic string CityofBirth;\n&#125;\n\nclass Program\n&#123;\n    static void Main()\n    &#123;\n        Employee empl new Employee();\n\n\t\templ.LastName=&quot;Doe&quot;;\n\t\templ.FirstName:&quot;Jane&quot;;\n\t\tempi:cityofBirth &quot;Dallas&quot;;\n\t\tConsole.WriteLine(&quot;(0)&quot;.empl:LastName);\n\t\tConsole.WriteLine(&quot;(0)&quot;,empl.FirstName);\n\t\tConsole.WriteLine(&quot;(0]&quot;.empl.CityofBirth);\n    &#125;\n&#125;\n</code></pre>\n<p>然而有的时候，如果能使用索引访问它们将会很方便，好像该实例是字段的数组一样。这正是索引器能做的事。如果为类 Employee 写一个索引器。请注意没有使用点运算符，相反，索引器使用索引运算符，它由一对方括号和中间的索引组成。</p>\n<pre><code class=\"language-c#\">class Employee\n&#123;\n    public string LastName;\n\tpublic string FirstName;\n\tpublic string CityofBirth;\n&#125;\n\nclass Program\n&#123;\n    static void Main()\n    &#123;\n        Employee empl new Employee();\n\n\t\templ.LastName=&quot;Doe&quot;;\n\t\templ.FirstName=&quot;Jane&quot;;\n\t\tempi:cityofBirth=&quot;Dallas&quot;;\n\t\tConsole.WriteLine(&quot;(0)&quot;.empl[0]);\n\t\tConsole.WriteLine(&quot;(0)&quot;,empl[1]);\n\t\tConsole.WriteLine(&quot;(0]&quot;.empl[2]);\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<p>索引器是一组 get 和 set 访问器，与属性类似。</p>\n<pre><code class=\"language-c#\">string this [int index]\n&#123;\n    set\n    &#123;\n        SetAccessorCode\n    &#125;\n    get\n    &#123;\n        GetAccessorCode\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<p>索引器和属性</p>\n<ul>\n<li>和属性一样，索引器不用分配内存来存储</li>\n<li>索引器和属性都主要被用来访问其他数据成员，它们与这些成员关联，并为他们提供获取和设置访问。\n<ul>\n<li>属性同常表示单个数据成员。</li>\n<li>索引器通常表示多个数据成员。</li>\n</ul>\n</li>\n</ul>\n<p>索引器属意事项</p>\n<ul>\n<li>和属性一样，索引器可以只有一个访问器，也可以两个都有。</li>\n<li>索引器总是实例成员，因此不能被声明为 static。</li>\n<li>和属性一样，实现 get 和 set 访问器的代码不一定要关联到某个字段或属性。这段代码可以做任何事情也可以什么也不用做，只要 get 访问器返回某个指定类型的值即可。</li>\n</ul>\n</li>\n<li>\n<p>索引器声明</p>\n<ul>\n<li>\n<p>声明索引器注意点：</p>\n<ul>\n<li>索引器没有名称。在名称的位置是关键字 this</li>\n<li>参数列表在方括号中间</li>\n<li>参数列表中至少声明一个参数</li>\n</ul>\n<pre><code class=\"language-c#\">ReturnType this [Type param1,……]\n&#123;\n    get\n    &#123;\n \n    &#125;\n    set\n    &#123;\n \n    &#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>索引器的 set 和 get 访问器</p>\n<ul>\n<li>\n<p>set 索引器：当索引器被用于赋值时，set 访问器被调用，并接受两项数据。set 访问器中的代码必须检查索引参数，以确定数据应该存往何处，然后保存它。</p>\n<ul>\n<li>一个名为 value 的隐式参数，其中持有要保存的数据。</li>\n<li>一个或更多个索引参数，表示数据应该保存到哪里。</li>\n</ul>\n<p>set 访问器语义：</p>\n<ul>\n<li>它的返回类型为 void。</li>\n<li>它使用的参数列表和索引器声明中的相同。</li>\n<li>它有一个名为 value 的隐式参数，值参类型和索引器类型相同。</li>\n</ul>\n</li>\n<li>\n<p>get 索引器：当使用索引器获取值时，可以通过一个或多个索引参数调用 get 访问器。get 访问器中的代码必须检查索引参数，以确定数据应该存往何处，然后保存它。</p>\n<p>get 访问器语义</p>\n<ul>\n<li>它的参数列表和索引器声明中的相同。</li>\n<li>它返回与索引类型相同的值。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>索引器示例</p>\n<ul>\n<li>\n<pre><code class=\"language-c#\">class Employee\n&#123;\n    public string LastName;                //调用字段0\n    public string FirstName;\t\t\t   //调用字段1\n    public string CityOfBirth;\t\t\t   //调用字段2\n \n    public string this[int index]\t\t   //索引器声明\n    &#123;\n        set\t\t\t\t\t\t\t\t   //set访问器声明\n        &#123;\n            switch(index)\n            &#123;\n                case 0:LastName=value;\n                    break;\n                case 1:FirstName=value;\n                    break;\n                case 2:CityOfBirth=value;\n                    break;\n                defaul:\n                    throw new ArgumentoutofRangeException(&quot;index&quot;);\n            &#125;\n        &#125;\n        get\t\t\t\t\t\t\t\t   //get访问器声明\n        &#123;\n            switch(index)\n            &#123;\n                case 0:return LastName;\n                case 1:return FirstName;\n                case 2:return CityOfBirth;\n \n                default:\n                    throw new ArgumentoutofRangeException(&quot;index&quot;);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<pre><code class=\"language-c#\">class Class1\n&#123;\n    int Temp0;\t\t\t\t\t//私有字段\n    int Temp1;\t\t\t\t\t//私有字段\n    public int this[int index]\n    &#123;\n        get\n        &#123;\n            return(0==index)?Temp0:Temp1;\n\t\t&#125;\n        set\n        &#123;\n            if(0==index)\n                Temp0=value;\n            else\n                Temp1=value;\n        &#125;\n    &#125;\n&#125;\nclass Example\n&#123;\n    static void Main()\n    &#123;\n        Class1 a=new Class1();\n \n        Console.WriteLine(&quot;Value -- T0:&#123;0&#125;,T1:&#123;1&#125;,a[0],a[1]&quot;);\n        a[0]=15;\n        a[1]=20;\n         Console.WriteLine(&quot;Value -- T0:&#123;,a[0]&#125;,T1:&#123;,a[1]&#125;&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>结果为：</p>\n<pre><code class=\"language-c#\">Values -T0:0,T1:0\nVa1ues--T0:15,T1:20\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>索引器重载</p>\n<ol>\n<li>\n<p>只要索引器的参数列表不同，类就可以有任意多个索引器。索引器类型不同是不够的。这叫作索引器重载，因为所有的索引器都有相同的 “名称”：this 访问引用。</p>\n<pre><code class=\"language-c#\">class MyClass\n&#123;\n    public string this [int index]\n\t&#123;\n        get&#123;&#125;\n        set&#123;&#125;\n    &#125;\n\n\tpublic string this [int index1,int index2]\n    &#123;\n        get&#123;&#125;\n        set&#123;&#125;\n    &#125;\n\n\tpublic int this [float index1]\n    &#123;\n        get&#123;&#125;\n        set&#123;&#125;\n    &#125;\n&#125;\n</code></pre>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"9-访问器的访问修饰符\"><a class=\"anchor\" href=\"#9-访问器的访问修饰符\">#</a> 9. 访问器的访问修饰符</h3>\n<ol>\n<li>\n<p>默认情况，索引器和属性的两个访问器级别跟索引器和属性自身的访问级别相同。也可以为两个访问器分配不同的访问级别。</p>\n<pre><code class=\"language-c#\">class Person\n&#123;\n    public string Name&#123;get;private set;&#125;\n    public Person(string name)&#123;Name=name;&#125;\n&#125;\nclass Program\n    [\nstatic public void Main()\n    &#123;\n        Person p=new Person(&quot;Capt.Ernest Evans&quot;);\n        Console.WriteLine(&quot;Person's name is &#123;P.Name&#125;&quot;);\n    &#125;\n</code></pre>\n<p>输出结果为：</p>\n<pre><code class=\"language-c#\">Person's name is Capt.Ernest Evans\n</code></pre>\n<p>在上面的代码中，可以从类的外部读取属性，但是只能在类的内部设置它。</p>\n</li>\n<li>\n<p>访问器的修饰符限制条件：</p>\n<ul>\n<li>仅当成员 (属性和索引器) 既有 get 访问器也有 set 访问器，其访问器才能访问修饰符。</li>\n<li>虽然两个访问器都必须出现，但它们中只能有一个有访问修饰符。</li>\n<li>访问器的访问修饰符的显示不惜比成员的访问级别更加严格。</li>\n</ul>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220917195545721.png\" alt=\"image-20220917195545721\" /></p>\n</li>\n</ol>\n<h3 id=\"10-分部类和分布类型\"><a class=\"anchor\" href=\"#10-分部类和分布类型\">#</a> 10. 分部类和分布类型</h3>\n<ol>\n<li>\n<p>类的声明可以分割成几个分布类的声明</p>\n<ul>\n<li>每个分部类的声明都含有一些类成员的声明。</li>\n<li>类的分部类声明可以在同一一个文件中也可以在不同文件中。</li>\n<li>每个分部类声明必须被标注为 partial class, 而不是单独的关键字 class。分部类声明看起来和普通类声明相同，只是增加了类型修饰符 partial。</li>\n</ul>\n<pre><code class=\"language-c#\">partial clas5 MyPartClass\t\t\t\t//类名称与下面的相同\n&#123;\n\tmemberi declaration;\n\tmember2 declaration;\n&#125;\n类型修饰符\npartial class MyPartClass\t\t\t\t//类名称与上西的相同\n&#123;\n    member3 declaration;\n\tmember4 declaration;\n&#125;\n\n</code></pre>\n</li>\n<li>\n<p>类型修饰符 partial 不是关键字，所以在其他上下文中，可以在程序中把它用作标识符。但直接用在关键字 class、struct 或 interface 之前时，它表示分部类型。</p>\n</li>\n<li>\n<p>分部类型还有局部结构和局部接口。</p>\n</li>\n</ol>\n<h3 id=\"11-分部方法\"><a class=\"anchor\" href=\"#11-分部方法\">#</a> 11. 分部方法</h3>\n<ol>\n<li>分部方法是声明在分部类中不同部分的方法。分部方法的不同部分可以声明在分部类的不同<br />\n部分中，也可以声明在同一个部分中。分部方法的两个部分如下。\n<ul>\n<li>定义分部方法声明。\n<ul>\n<li>给出签名和返回类型。</li>\n<li>声明的实现部分只是一个分号。</li>\n</ul>\n</li>\n<li>实现分部方法声明。\n<ul>\n<li>给出签名和返回类型。</li>\n<li>以普通的语句块形式实现。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>分部方法需要了解的内容\n<ul>\n<li>定义声明和实现声明的签名和返回类型必须匹配。签名和返回类型有如下特征：\n<ul>\n<li>返回类型必须是 void。</li>\n<li>签名不能包括访问修饰符，这使分部方法是隐式私有的。</li>\n<li>参数列表不能包含 out 参数。</li>\n<li>在定义声明和实现声明中都必须包含上下文关键字 partial, 并且直接放在关键字 void 之前。</li>\n</ul>\n</li>\n<li>可以有定义部分而没有实现部分。在这种情况下，编译器把方法的声明以及方法内部任何对方法的调用都移除。不能只有分部方法的实现部分而没有定义部分</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"四-类的继承\"><a class=\"anchor\" href=\"#四-类的继承\">#</a> 四、类的继承</h2>\n<h3 id=\"1-屏蔽基类的成员\"><a class=\"anchor\" href=\"#1-屏蔽基类的成员\">#</a> 1. 屏蔽基类的成员</h3>\n<ol>\n<li>虽然派生类不能删除它继承的任何成员，但可以用与基类成员名称相同的成员来屏薇 (mask) 基类成员。这是继承的主要功能之一，非常实用。\n<ul>\n<li>要屏蔽一个继承的数据成员，需要声明一个新的相同类型的成员，并使用相同的名称。</li>\n<li>通过在派生类中声明新的带有相同签名的函数成员，可以屏蔽继承的函数成员。请记住，签名由名称和参数列表组成，不包括返回类型。</li>\n<li>要让编译器知道你在故意屏蔽继承的成员，可使用 new 修饰符。否则，程序可以成功编译，但编译器会警告你隐藏了一个继承的成员。</li>\n<li>也可以屏蔽静态成员。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-虚方法和覆写方法\"><a class=\"anchor\" href=\"#2-虚方法和覆写方法\">#</a> 2. 虚方法和覆写方法</h3>\n<ol>\n<li>虚方法可以使基类的引用访问 “升至” 派生类内。可以使用基类引用调用派上类的方法，只需满足下面的条件。\n<ul>\n<li>派生类的方法和基类的方法有相同的签名和返回类型。</li>\n<li>基类的方法使用 virtual 标注。</li>\n<li>派生类的方法使用 override 标注。</li>\n</ul>\n</li>\n<li>其他关于 virtual 和 override 修饰符的重要信息如下。\n<ul>\n<li>覆写和被覆写的方法必须有相同的可访问性。例如，这种情况是不可以的：被覆写的方<br />\n法是 private 的，而覆写方法是 public 的。</li>\n<li>不能覆写 static 方法或非虚方法。</li>\n<li>方法、属性和索引器，以及另一种成员类型一事件，都可以被声明为 virtual 和 override.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-构造函数的执行\"><a class=\"anchor\" href=\"#3-构造函数的执行\">#</a> 3. 构造函数的执行</h3>\n<ol>\n<li>\n<p>要创建对象的基类部分，需要隐式调用基类的某个构造函数。继承层次链中的每个类在执行它自己的构造函数体之前执行它的基类构造函数。<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220917205056606.png\" alt=\"image-20220917205056606\" /></p>\n</li>\n<li>\n<p>默认情况下，在构造对象时，将调用基类的无参数构造函数。但构造函数可以重载，所以基类可能有一个以上的构造函数。如果希望派生类使用一个指定的基类构造函数而不是无参数构造函数，必须在构造函数初始化语句中指定它。<br />\n有两种形式的构造函数初始化语句。</p>\n<ul>\n<li>第一种形式使用关键字 base 并指明使用哪一个基类构造函数。</li>\n<li>第二种形式使用关键字 this 并指明应该使用当前类的哪一个构造函数。</li>\n</ul>\n<p>基类构造函数初始化语句放在冒号后面，跟在类的构造函数声明的参数列表后面。构造函数始化语句由关键字 base 和要调用的基类构造函数的参数列表组成。</p>\n</li>\n</ol>\n<h3 id=\"4-类访问修饰符\"><a class=\"anchor\" href=\"#4-类访问修饰符\">#</a> 4. 类访问修饰符</h3>\n<p>可访问（accessible) 有时也称为可见（visible), 它们可以互换使用。类的可访问性有两个级别：public 和 internal。</p>\n<ul>\n<li>\n<p>标记为 pub1ic 的类可以被系统内任何程序集中的代码访问。要使一个类对其他程序集可见，使用 pub1ic 访问修饰符，如下所示：</p>\n<pre><code class=\"language-c#\">public class MyBaseClass\n&#123;\n    ……\n&#125;\n</code></pre>\n</li>\n<li>\n<p>标记为 internal 的类只能被它自已所在的程序集内的类看到。</p>\n<ul>\n<li>这是默认的可访问级别，所以，. 除非在类的声明中显式地指定修饰符 pub1ic, 否则程<br />\n序集外部的代码不能访问该类。</li>\n<li>可以使用 internal 访问修饰符显式地声明一个类为内部的。</li>\n</ul>\n<pre><code class=\"language-c#\">internal class MyBaseClass\n&#123;\n    ……\n&#125;\n</code></pre>\n</li>\n</ul>\n<h3 id=\"5-修饰符的可访问性\"><a class=\"anchor\" href=\"#5-修饰符的可访问性\">#</a> 5. 修饰符的可访问性</h3>\n<ol>\n<li>public 访问级别是限制最少的。所有的类，包括程序集内部的类和外部的类都可以自由地访问成员。</li>\n<li>private 访问级别是限制最严格的。private 类成员只能被它自己的类的成员访问。它不能被其他的类访问，包括继承它的类。然而，private 成员能被嵌套在它的类中的类成员访问。</li>\n<li>protected 访问级别如同 private 访问级别，但它允许派生自该类的类访问该成员。注意，即使程序集外部继承该类的类也能访问该成员。</li>\n<li>标记为 internal 的成员对程序集内部的所有类可见，但对程序集外部的类不可见。</li>\n<li>标记为 protected internal 的成员对所有继承该类的类以及程序集内部的所有类可见。注意，允许访问的集合是 protected 修饰符允许访问的类的集合加上 internal 修饰符允许访问的类的集合。注意，这是 protected 和 internal 的并集，不是交集。</li>\n</ol>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220917210313358.png\" alt=\"image-20220917210313358\" /></p>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220917210349590.png\" alt=\"image-20220917210349590\" /></p>\n<h3 id=\"6-抽象成员\"><a class=\"anchor\" href=\"#6-抽象成员\">#</a> 6. 抽象成员</h3>\n<ol>\n<li>\n<p>抽象成员是指设计为被覆写的函数成员。抽象成员有以下特征。</p>\n<ul>\n<li>必须是一个函数成员。也就是说，字段和常量不能为抽象成员。</li>\n<li>必须用 abstract 修饰符标记。</li>\n<li>不能有实现代码块。抽象成员的代码用分号表示。</li>\n</ul>\n</li>\n<li>\n<p>抽象成员只可以在抽象类中声明，下一节中会讨论。一共有 4 种类型的成员可以声明为抽象的：</p>\n<ul>\n<li>方法；</li>\n<li>属性；</li>\n<li>事件；</li>\n<li>索引器。</li>\n</ul>\n<p>关于抽象成员的其他重要事项如下。</p>\n<ul>\n<li>尽管抽象成员必须在派生类中用相应的成员覆写，但不能把 virtual 修饰符附加到 abstract 修饰符。</li>\n<li>类似于虚成员，派生类中抽象成员的实现必须指定 override 修饰符。</li>\n</ul>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220917210712470.png\" alt=\"image-20220917210712470\" /></p>\n</li>\n</ol>\n<h3 id=\"7-静态类\"><a class=\"anchor\" href=\"#7-静态类\">#</a> 7. 静态类</h3>\n<ol>\n<li>静态类中所有成员都是静态的。静态类用于存放不受实例数据影响的数据和函数。静态类的一个常见用途可能是创建一个包含一组数学方法和值的数学库。\n<ul>\n<li>类本身必须标记为 static。</li>\n<li>类的所有成员必须是静态的。</li>\n<li>类可以有一个静态构造函数，但不能有实例构造函数，因为不能创建该类的实例。</li>\n<li>静态类是隐式密封的，也就是说，不能继承静态类。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"五-运算符\"><a class=\"anchor\" href=\"#五-运算符\">#</a> 五、运算符</h2>\n<h3 id=\"1-运算符重载\"><a class=\"anchor\" href=\"#1-运算符重载\">#</a> 1. 运算符重载</h3>\n<ol>\n<li>\n<p>运算符重载允许你定义 C# 运算符应该如何操作自定义类型的操作数。</p>\n<ul>\n<li>运算符重载只能用于类和结构</li>\n<li>为类或结构重载一个运算符 x, 可以声明一个名称为 operator× 的方法并实现它的行为\n<ul>\n<li>一元运算符的重载方法带一个单独的 class 或 struct 类型的参数。</li>\n<li>二元运算符的重载方法带两个参数，其中至少有一个必须是 class 或 struct 类型。</li>\n</ul>\n</li>\n<li>声明必须同时使用 static 和 public 的修饰符；</li>\n<li>运算符必须是要操作的类或结构的成员。</li>\n</ul>\n</li>\n<li>\n<p>运算符重载限制</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220917212812990.png\" alt=\"image-20220917212812990\" /></p>\n<ul>\n<li>运算符重载不能：\n<ul>\n<li>创建新运算符；</li>\n<li>改变运算符的语法；</li>\n<li>重新定义运算符如何处理预定义类型；</li>\n<li>改变运算符的优先级或结合性。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-typeof运算符和-nameof-运算符\"><a class=\"anchor\" href=\"#2-typeof运算符和-nameof-运算符\">#</a> 2. <strong>typeof</strong> 运算符和 nameof 运算符</h3>\n<ol>\n<li>\n<p>typeof 运算符返回作为其参数的任何类型的 System.Type 对象。通过这个对象，可以了解类型的特征。</p>\n<p>typeof 运算符是一元运算符。</p>\n</li>\n<li>\n<p>nameof 运算符返回一个表示传人参数的字符串。</p>\n</li>\n</ol>\n<h2 id=\"六-委托\"><a class=\"anchor\" href=\"#六-委托\">#</a> 六、委托</h2>\n<h3 id=\"1委托概述\"><a class=\"anchor\" href=\"#1委托概述\">#</a> 1. 委托概述</h3>\n<p>委托和类一样，是一种用户用户自定义类型。但类表示的是数据和方法的集合，而委托则持有一个或多个方法，以及一系列预定义操作。</p>\n<ul>\n<li>声明一个委托类型。委托声明看上去和方法声明类似，只是没有实现块。</li>\n<li>使用该委托类型声明一个委托变量。</li>\n<li>创建一个委托类型的对象，并把它赋值给委托变量。新的委托对象包含指向某个方法的引用，这个方法的签名和返回类型必须跟第一步中定义的委托类型一致。</li>\n<li>可以选择为委托对象添加其他方法。这些方法的签名和返回类型必须与第一部中定义的委托类型相同。</li>\n<li>可以像调用方法一样调用委托。在调用委托的时候，其包含的每一个方法都会被执行。</li>\n</ul>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220921194159165.png\" alt=\"image-20220921194159165\" /></p>\n<ul>\n<li>\n<p>方法的列表称为调用列表</p>\n</li>\n<li>\n<p>委托持有的方法可以来自任何类或结构，只要它们在下面两方面匹配：</p>\n<ul>\n<li>委托的返回类型；</li>\n<li>委托的签名 (包括 ref 和 out 修饰符)</li>\n</ul>\n</li>\n<li>\n<p>在调用列表中的方法可以是实例方法也可以是静态方法。</p>\n</li>\n<li>\n<p>在调用委托的时候，会执行其调用列表中的所有方法。</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220921195045455.png\" alt=\"image-20220921195045455\" /></p>\n</li>\n</ul>\n<h3 id=\"2-声明委托类型\"><a class=\"anchor\" href=\"#2-声明委托类型\">#</a> 2. 声明委托类型</h3>\n<ol>\n<li>\n<p>委托类型必须在创建变量以及类型的对象之前声明。</p>\n<pre><code class=\"language-c#\">delegate void MyDel(int x);\n</code></pre>\n<p>委托类型声明在两个方面与方法不同。委托类型声明：</p>\n<ul>\n<li>以 delegate 关键字开头；</li>\n<li>没有方法主体</li>\n</ul>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220921195755345.png\" alt=\"image-20220921195755345\" /></p>\n</li>\n<li>\n<p>委托是引用类型，因此有引用和对象。委托类型的变量声明：</p>\n<pre><code class=\"language-c#\">MyDel delVar;\n</code></pre>\n</li>\n<li>\n<p>创建委托对象的方式有两种。</p>\n<ul>\n<li>\n<p>第一种是使用 new 运算符的对象创建表达式。new 运算符的操作数组成如下。</p>\n<ul>\n<li>委托类型名。</li>\n<li>一组圆括号，其中包含作为调用列表中第一个成员方法的名称。该方法可以是实例方法或静态方法。</li>\n</ul>\n<pre><code class=\"language-c#\">delVar=new MyDel(myInsObj.MyM1);\ndVar=new MyDel(SClass.OtherM2);\n</code></pre>\n</li>\n<li>\n<p>还可以使用快捷语法，它仅由方法说明符构成。这种快捷语法能够工作是因为方法名称和其相应的委托类型之间存在隐式转换。</p>\n<pre><code class=\"language-c#\">delVar =MyInsObj.MyM1;\ndVar =SClass.OtherM2;\n</code></pre>\n<p>除了为委托分配内存，创建委托对象还会把第一个方法放入委托的调用列表。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>由于委托是引用类型，我们可以通过给它赋值来改变包含在委托变量中的引用。旧的委托对象会被垃圾回收器回收。</p>\n</li>\n<li>\n<p>委托可以使用额外的运算符来 “组合”。这个运算会创建一个新的委托，并调用列表连接了作为操作数的两个委托的调用列表副本。</p>\n<pre><code class=\"language-c#\">MyDel delA=myInstObj.MyM1;\nMyDel delB=SClass.OtherM2;\n\nMyDel delC=delA + delB;\n</code></pre>\n<p><strong>委托是恒定的。委托对象被创建后不能在被改变。</strong></p>\n</li>\n</ol>\n<h3 id=\"3-委托的添加方法和移除方法\"><a class=\"anchor\" href=\"#3-委托的添加方法和移除方法\">#</a> 3. 委托的添加方法和移除方法</h3>\n<ol>\n<li>\n<ol>\n<li>C# 可以为委托添加和移除方法，即使用 **+=<strong> 和</strong> -=** 运算符。</li>\n</ol>\n<ul>\n<li>\n<p>添加方法</p>\n<pre><code class=\"language-C#\">MyDel delVar =new inst.MyM1;\ndecVar +=SCL.m3;\ndelVar +=X.Act;\n</code></pre>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220921204834993.png\" alt=\"image-20220921204834993\" /></p>\n<p>在使用 += 运算符时，实际发生的是创建了一个新的委托，其调用列表是左边的委托加上右边的方法的组合。然后将这个新的委托赋值给 delVar。每次添加都会在调用列表创建一个新的元素。</p>\n</li>\n<li>\n<p>移除方法</p>\n<pre><code class=\"language-c#\">decVar -=SCL.m3;\n</code></pre>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220921205038288.png\" alt=\"image-20220921205038288\" /></p>\n<p>与为委托添加方法一样，其实是创建了一个新的委托。新的委托是旧的委托的副本 — 只是没有被有了已经被移除的方法。</p>\n<p>移除委托需要记住的一些事项，</p>\n<ul>\n<li>如果在调用列表中的方法有多个实例，**-=** 运算符将从列表的最后开始索引，并且移除第一个与方法匹配的实例。</li>\n<li>试图删除委托中不存在的方法将无效。</li>\n<li>试图调用空委托会抛出异常。可以通过将委托和 null 进行比较来判断委托的调用列表是否为空。如果调用列表为空，则委托是 null。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-委托的调用\"><a class=\"anchor\" href=\"#4-委托的调用\">#</a> 4. 委托的调用</h3>\n<ol>\n<li>\n<p>委托调用的重要事项。</p>\n<ul>\n<li>可以通过两种方式调用委托。一种是调用方法一样调用委托，另一种是使用委托的 Invoke 方法。</li>\n<li>可以将参数放在调用的圆括号内。用于调用委托的参数作用于调用列表中的每个方法 (除非其中一个参数是输出参数)。</li>\n<li>调用时委托不能为空 (null), 否则将引发异常。可以使用 if 语句进行检查，也可以使用空条件运算符和 Invoke 方法。</li>\n</ul>\n<pre><code class=\"language-c#\">MyDel delVar inst.MyM1;\ndelvar+=SC1.m3;\ndelvar+=X.Act;\n\nif (delVar !=null)\n&#123;\n    de1var(55);\t\t\t//调用委托\n&#125;\ndelVar?.Invoke(65);\t\t//使用Invoke和空条件运算符\n</code></pre>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220921211205874.png\" alt=\"image-20220921211205874\" /></p>\n</li>\n<li>\n<p>调用带返回值的委托<br />\n如果委托有返回值并且在调用列表中有一个以上的方法，会放生下面的 qingkuang</p>\n<ul>\n<li>调用列表中最后一个方法返回的值就是委托调用返回的值。</li>\n<li>调用列表中所有其他方法的返回值都会被忽略。</li>\n</ul>\n<pre><code class=\"language-c#\">delegate int MyDel();\t\t\t\t\t\t\t//声明有返回位的方法\nclass MyClass\n&#123;\n    int IntValue 5;\n\tpublic int Add2()&#123;IntValue +2;return IntValue;&#125;\n\tpublic int Add3()&#123;IntValue +3;return IntValue;&#125;\n&#125;\n\nclass Program\n&#123;\n     MyClass mc new Myclass();\n\t\tMyDel mDel mc.Add2;\t\t\t\t\t\t\t//创建并初始化委托\n\t\tmDel +mc.Add3;\t\t\t\t\t\t\t\t//增加方法\n\t\tmDel +mc.Add2;\t\t\t\t\t\t\t\t//增加方法\n\t\tConsole.WriteLine($&quot;Value:mDel()&#125;&quot;);\t\t//调用委托并使用返回值\n    &#125;\n&#125;\n</code></pre>\n<p>输出结果为：</p>\n<pre><code class=\"language-c#\">12\n</code></pre>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220927194547963.png\" alt=\"image-20220927194547963\" /></p>\n</li>\n<li>\n<p>调用带引用参数的委托<br />\n如果委托带有引用参数，参数值会根据调用列表中的一个或多个方法的返回值而改变。</p>\n<pre><code class=\"language-C#\">delegate int MyDel(ref int x);\t\t\t\t\t\t//声明有返回位的方法\nclass MyClass\n&#123;\n    int IntValue 5;\n    public int Add2(ref int x)&#123;x += 2;&#125;\n\tpublic int Add3(ref int x)&#123;x += 3;&#125;\n\nstatic void Main()\n    &#123;\n        MyClass mc new Myclass();\n\t\tMyDel mDel mc.Add2;\n\t\tmDel +mc.Add3;\n\t\tmDel +mc.Add2;\n\n    \tint x = 5;\n    \tmDel(ref x);\n\n\t\tConsole.WriteLine($&quot;Value:&#123;x&#125;&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>输出结果为:</p>\n<pre><code class=\"language-c#\">12\n</code></pre>\n<p><img data-src=\"F:%5C%E7%AC%94%E8%AE%B0%5Cimage-20220927195618833.png\" alt=\"image-20220927195618833\" /></p>\n</li>\n</ol>\n<h3 id=\"5-匿名方法\"><a class=\"anchor\" href=\"#5-匿名方法\">#</a> 5. 匿名方法</h3>\n<ol>\n<li>\n<p>匿名方法让我们无须使用独立的具名方法。匿名方法 (anonymous method) 是在实例化委托时内联 (inline) 声明的方法。例如，图 14-l2<br />\n 演示了同一个类的两个版本。左边的版本声明并使用了一个名为 Add20 的方法。右边的版本使用匿名方法。没有底色的代码部分对于两个版本是一样的。<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220927200005598.png\" alt=\"image-20220927200005598\" /><br />\n 输出结果为：</p>\n<pre><code class=\"language-c#\">25\n26\n</code></pre>\n<ul>\n<li>\n<p>使用匿名方法</p>\n<ul>\n<li>声明委托变量作为初始化表达方法。</li>\n<li>组合委托时在赋值语句的右边。</li>\n<li>为委托增加事件时在赋值语句的右边。</li>\n</ul>\n<p>匿名方法表达式的语法</p>\n<ul>\n<li>delegate 类型关键字</li>\n<li>参数列表，如果语句块没有使用任何参数列表则可以省略</li>\n<li>语句块，它包含了匿名方法的代码</li>\n</ul>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220927200408061.png\" alt=\"image-20220927200408061\" /></p>\n<ol>\n<li>\n<p>返回类型<br />\n匿名方法不会显式声明返回值。然而，实现代码本身的行为必须通过返回一个与委托的返回类型相同的值来匹配委托的返回类型。如果委托有 Void 类型的返回值，匿名方法就不能返回值。</p>\n</li>\n<li>\n<p>参数<br />\n除了数组参数，匿名方法的参数列表必须在如下 3 方面与委托匹配：・</p>\n<ul>\n<li>参数数量；</li>\n<li>参数类型及位置；</li>\n<li>修饰符。</li>\n</ul>\n<p>可以通过使圆括号为空或省略圆括号来简化匿名方法的参数列表，但必须满足以下两个条件：</p>\n<ul>\n<li>委托的参数列表不包含任何 out 参数；</li>\n<li>匿名方法不使用任何参数。</li>\n</ul>\n</li>\n<li>\n<p>params 参数</p>\n<p>如果委托声明的参数列表包含了 params 参数，那么匿名方法的参数列表将忽略 params 关键字。</p>\n<ul>\n<li>委托类型声明指定最后一个参数为 params 类型的参数；</li>\n<li>然而，匿名方法参数列表必须省略 params 关键字。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>变量和参数的作用域<br />\n参数以及声明在匿名方法内部的局部变量的作用域限制在实现代码的主题之内。<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220927202320950.png\" alt=\"image-20220927202320950\" /></p>\n<ul>\n<li>\n<p>外部变量<br />\n与委托的具名方法不同，匿名方法可以访问它们外围作用域的局部变量和环境。</p>\n<ul>\n<li>外围作用域的变量叫做外部变量 (outer variable)。</li>\n<li>用在匿名方法实现代码中的外部变量称为方法捕获。</li>\n</ul>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220927211036778.png\" alt=\"image-20220927211036778\" /></p>\n</li>\n<li>\n<p>捕获变量的生命周期的拓展<br />\n只要捕获方法是委托的一部分，即使变量已经离开了作用域，捕获的外部变量也会一直有效。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"6-lambda-表达式\"><a class=\"anchor\" href=\"#6-lambda-表达式\">#</a> 6. Lambda 表达式</h3>\n<p>使用 Lambda 表达式来代替匿名方法。<br />\n匿名方法转换为 Lambda 表达式：</p>\n<ul>\n<li>删除 delegate 关键字；</li>\n<li>在参数列表和匿名方法主体之间放置 Lambda 运算符 =&gt;。Lamnda 运算符读作 “goes to”。</li>\n</ul>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220927212306117.png\" alt=\"image-20220927212306117\" /></p>\n<p>编译器可以从 lambda 表达式中推断更多信息。</p>\n<ul>\n<li>编译器还可以从委托的声明中知道委托的参数的类型，因此 lambda 表达式允许省略类型参数。\n<ul>\n<li>带有类型的参数列表被称为显式类型。</li>\n<li>省略类型的参数列表被称为隐式类型。</li>\n<li>如果只有一个隐式类型参数，我们可以省略两端的圆括号。</li>\n<li>最后，Lambda 表达式允许表达式的主体是语句块或表达式。如果语句块包含了一个返回语句，我们可以将语句替换为 return 关键字后的表达式。</li>\n</ul>\n</li>\n</ul>\n<p>Lambda 表达式的参数列表要点：</p>\n<ul>\n<li>Lambda 表达式参数列表中的参数必须要在参数数量、类型和位置上与委托相同。</li>\n<li>表达式的参数列表中的参数不一定需要包含类型 (隐式类型)，除非委托有 ref 或 out 参数 — 此时必须注明类型 (显式类型)。</li>\n<li>如果只有一个参数，并且是隐式类型的，则两端的圆括号可以省略，否则必须有括号。</li>\n<li>如果没有参数，必须使用一组空的圆括号。</li>\n</ul>\n<h2 id=\"七-事件\"><a class=\"anchor\" href=\"#七-事件\">#</a> 七、事件</h2>\n<h3 id=\"1-发布者和订阅者\"><a class=\"anchor\" href=\"#1-发布者和订阅者\">#</a> 1. 发布者和订阅者</h3>\n<ol>\n<li>\n<p>发布者 / 订阅者模式（publisher/subscriber pattern) 可以满足这种需求。在这种模式中，发布者类定义了一系列程序的其他部分可能感兴趣的事件。其他类可以 “注册”，以便在这些事件发生时收到发布者的通知。这些订阅者类通过向发布者提供一个方法来 “注册” 以获取通知。当事件发生时，发布者 “触发事件”，然后执行订阅者提交的所有事件。</p>\n<p>由订阅者提供的方法称为回调方法，因为发布者通过执行这些方法来 “往回调用订阅者的方法”。还可以将它们称为事件处理程序，因为它们是为处理事件而调用的代码。<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220928193604069.png\" alt=\"image-20220928193604069\" /></p>\n</li>\n<li>\n<p>关于事件的重要事项。</p>\n<ul>\n<li><strong>发布者</strong> 发布某个事件的类或结构，其他类可以在该事件发生时得到通知</li>\n<li><strong>订阅者</strong> 注册并在事件发生时得到通知的类或结构</li>\n<li><strong>事件处理程序</strong> 由订阅者注册事件的方法，在发布者 出发事件时执行。事件处理程序方法可以定义在事件所在的类或结构中，也可以定义在不同的类或结构中。</li>\n<li><strong>触发事件</strong> 调用或触发事件的术语。当事件被触发时，所有注册到它的方法都会被一次调用。</li>\n</ul>\n</li>\n<li>\n<p>事件包含了一个私有的委托。<br />\n事件的私有委托注意事项：</p>\n<ul>\n<li>事件提供了对它的私有控制委托的结构化访问。也就是说，你无法直接访问委托。</li>\n<li>事件中可用的操作比委托要少，对于事件我们只能添加、删除或调用事件处理程序。</li>\n<li>事件被触发时，它调用委托来依次调用调用列表中的方法。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-源代码组件概览\"><a class=\"anchor\" href=\"#2-源代码组件概览\">#</a> 2. 源代码组件概览</h3>\n<ol>\n<li>\n<p>事件中使用的代码有 5 部分</p>\n<ul>\n<li><strong>委托类型声明</strong> 事件和事件处理程序必须有共同的签名和返回类型，它们通过委托类型进行描述。</li>\n<li><strong>事件处理程序声明</strong> 订阅者类中会在事件触发时执行的方法声明。它们不一定是显式命名的方法，还可以是匿名方法或 Lambda 表达式。</li>\n<li><strong>事件声明</strong> 发布者类必须声明一个订阅者类可以注册的事件成员。当类声明的事件为 public 时，称为发布了事件。</li>\n<li><strong>事件注册</strong> 订阅者必须注册事件才能在事件被触发时得到通知。这是将事件处理程序与事件相连的代码。</li>\n<li><strong>触发事件的代码</strong> 发布者类中 “触发” 事件并导致调用注册的所有事件处理程序的代码。</li>\n</ul>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20220928195921778.png\" alt=\"image-20220928195921778\" /></p>\n</li>\n</ol>\n<h3 id=\"3-声明事件\"><a class=\"anchor\" href=\"#3-声明事件\">#</a> 3. 声明事件</h3>\n<ol>\n<li>\n<p>声明事件的语法<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220928200248183.png\" alt=\"image-20220928200248183\" /><br />\n 关于事件声明的内容：</p>\n<ul>\n<li>事件声明在一个类中。</li>\n<li>它需要委托类型的名称，任何附加到事件 (如注册) 的处理程序都必须与委托类型的签名和返回类型匹配。</li>\n<li>它声明为 public，这样其他类和结构可以在它上面注册事件处理程序。</li>\n<li>不能使用对象创建表达式 (new 表达式) 创建它的对象。</li>\n</ul>\n<p>使用使用逗号分隔创建多个事件：<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220928200724245.png\" alt=\"image-20220928200724245\" /></p>\n<p>也可以可以使用 static 关键字让事件变为静态：<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20220928200800904.png\" alt=\"image-20220928200800904\" /></p>\n</li>\n<li>\n<p>事件是成员<br />\n事件的特性</p>\n<ul>\n<li>由于事件的成员：\n<ul>\n<li>我们不能在一段可执行代码中声明事件；</li>\n<li>它必须声明在类或者结构中，和其他成员一样。</li>\n</ul>\n</li>\n<li>事件成员被隐式自动初始化为 null；</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-订阅事件\"><a class=\"anchor\" href=\"#4-订阅事件\">#</a> 4. 订阅事件</h3>\n<ol>\n<li>订阅者向事件添加事件处理程序。对于一个要添加到事件的事件处理程序来说，它必须具有与事件的委托相同的返回类型和签名。\n<ul>\n<li>使用 += 运算符来为事件添加事件处理程序。事件处理程序位于该运算符的右边。</li>\n<li>事件处理程序的规范可以是以下任意的一种：\n<ul>\n<li>实例方法的名称；</li>\n<li>静态方法的名称；</li>\n<li>匿名方法；</li>\n<li>Lambda 表达式。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"5-触发事件\"><a class=\"anchor\" href=\"#5-触发事件\">#</a> 5. 触发事件</h3>\n<ol>\n<li>\n<p>事件成员本身只是保存了需要被调用的事件处理程序。如果事件没有被触发，什么都不会发生。我们需要确保有代码在合适的时候做这件事情。</p>\n<ul>\n<li>在触发事件之前和 null 进行比较，从而查看事件是否包含事件处理程序。如果事件是 nu11, 则表示没有事件处理程序，不能执行。</li>\n<li>触发 l 事件的语法和调用方法一样：\n<ul>\n<li>使用事件名称，后面跟着参数列表（包含在圆括号中)：</li>\n<li>参数列表必须与事件的委托类型相匹配。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>标准事件的用法</p>\n<p>事件的使用，NET 框架提供了一个标准模式。该标准模式的基础就是 System 命名空间中声明的 EventHandler 委托类型。EventHandler 委托类型的声明如以下代码所示。关于该声明需要注意以下几点。</p>\n<ul>\n<li>\n<p>第一个参数用来保存触发事件的对象的引用。由于它是 object 类型的，所以可以匹配任何类型的实例。</p>\n</li>\n<li>\n<p>第二个参数用来保存状态信息，指明什么类型适用于该应用程序。</p>\n</li>\n<li>\n<p>返回类型是 void。</p>\n</li>\n</ul>\n<pre><code class=\"language-c#\">public delegate void EventHandler(object sender,EventArgs e);\n</code></pre>\n<p>EventHandler 委托类型的第二个参数是 EventArgs 类的对象，它声明在 System 命名空间中。</p>\n<ul>\n<li>EventArgs 不能传递任何数据，它用于不需要传递数据的事件处理程序 - 通常会被忽略。</li>\n<li>如果你希望传递数据，必须声明一个派生自 EventArgs 的类，并使用合适的字段来保存需要传递的数据。</li>\n</ul>\n</li>\n<li>\n<p>拓展 EventArgs 来传递数据<br />\n声明一个派生自 EventArgs 的自定义类，它可以保存我们需要传入的数据。类的名称应以 EventArgs 结尾。</p>\n<pre><code class=\"language-c#\">public class IncrementerEvenrArgs:EventArgs\n&#123;\n    public int IterationCount&#123;get:set;&#125;  //存储一个整数\n&#125;\n</code></pre>\n<p>可以使用泛型委托： <code>EventHandler&lt;&gt;</code></p>\n<ul>\n<li>将自定义类的名称放在尖括号内。</li>\n<li>在需要使用自定义委托类型的地方使用整个字符串。</li>\n</ul>\n<pre><code class=\"language-c#\">public event EventHandler&lt;IncreamentEventArgs&gt; CountedADozen;\n</code></pre>\n</li>\n<li>\n<p>移除事件处理程序</p>\n<p>在用完事件处理程序之后，可以从事件中把它移除。可以利用 -= 运算符把事件处理程序从事件中移除，如下所示：</p>\n<pre><code class=\"language-c#\">p.SimpleEvent -= s.MethdB;    //移除事件处理程序MethodB\n</code></pre>\n<p>如果一个处理程序向事件注册了多次，那么当执行命令移除处理程序时，将只移除列表中该处理程序的最后一个实例。</p>\n</li>\n</ol>\n<h3 id=\"6-事件访问器\"><a class=\"anchor\" href=\"#6-事件访问器\">#</a> 6. 事件访问器</h3>\n<ol>\n<li>\n<p>事件只允许 += 和 -= 运算符。我们可以修改这两个运算符的行为，在使用时让事件执行任何我们希望的自定义代码。<br />\n要改变这两个运算符的操作，必须为事件定义事件访问器：</p>\n<ul>\n<li>有两个访问器：<strong>add</strong> 和<strong> remove</strong>。</li>\n<li>声明事件的访问器看上去和声明属性差不多。</li>\n</ul>\n<p>两个访问器都有叫作 value 的隐式值参数，它连受实例或静态方法的引用。</p>\n<pre><code class=\"language-c#\">public event EventHandler CountedADozen\n&#123;\n    add\n    &#123;\n        ...\t\t\t\t//执行+=运算符的代码\n    &#125;\n    remove\n    &#123;\n        ...\t\t\t\t//执行-=运算符的代码\n    &#125;\n&#125;\n</code></pre>\n<p>声明了事件访问器之后，事件不包含任何内嵌委托对象。我们必须实现自己的机制来存储和移除事件注册的方法。<br />\n事件访问器表现为 void 方法，也就是不能使用返回值的 return 语句。</p>\n</li>\n</ol>\n<h2 id=\"八-泛型\"><a class=\"anchor\" href=\"#八-泛型\">#</a> 八、泛型</h2>\n<h3 id=\"1-c中的泛型\"><a class=\"anchor\" href=\"#1-c中的泛型\">#</a> 1. C# 中的泛型</h3>\n<ol>\n<li>\n<p>泛型 (generic) 提供了一种更优雅的方式，可以让多个类共享一组代码。泛型允许我们声明<strong>类型参数化</strong>的代码，用不同类进行实例化。<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20221005192917301.png\" alt=\"image-20221005192917301\" /></p>\n<p>C# 提供了 5 种泛型：类、结构、接口、委托和方法。前 4 种是类型，最后一种是方法。</p>\n</li>\n<li>\n<p>示例</p>\n<pre><code class=\"language-c#\">class MyStack&lt;T&gt;\n&#123;\n    int StackPointer=0;\n    T []StackArray;\n    \n    public void Push(T x)&#123;……&#125;\n    \n    public T Pop() &#123;……&#125;\n&#125;\n</code></pre>\n<p>在类的示例中，使用占位符<strong> T</strong> 而不是 float 来替换 int。</p>\n</li>\n</ol>\n<h3 id=\"2-泛型类\"><a class=\"anchor\" href=\"#2-泛型类\">#</a> 2. 泛型类</h3>\n<ol>\n<li>\n<p>声明泛型类<br />\n声明一个简单的泛型类和声明普通类差不多。区别如下：</p>\n<ul>\n<li>在类名之后放置一组尖括号。</li>\n<li>在尖括号中用逗号分隔的占位符字符串来表示需要提供的类型。这叫作类型参数 (type parameter)。</li>\n<li>在泛型类声明的主体中使用类型参数来表示替代类型。</li>\n</ul>\n<pre><code class=\"language-c#\">class SomeClass &lt;T1,T2&gt;\n&#123;\n    public T1 SomeVar;\n    public T2 OtherVar;\n&#125;\n</code></pre>\n</li>\n<li>\n<p>比较泛型和非泛型栈<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20221005194905583.png\" alt=\"image-20221005194905583\" /></p>\n</li>\n<li>\n<p>类型参数的约束</p>\n<p>​\t在泛型栈的示例中，栈除了保存和弹出它包含的一些项之外没有做任何事情。它不会尝试添加、比较项，也不会做其他任何需要用到项本身的运算符的事情。这是有原因的。由于泛型栈不知道它们保存的项的类型是什么，所以也就不会知道这些类型实现的成员。</p>\n<p>​\t所有的 C# 对象最终都从 object 类继承，因此，栈可以确认的是，这些保存的项都是实现了 object 类的成员，包括 ToString、Equals 以及 GetType 方法。除此以外，他不知道还有哪些成员可以使用。</p>\n<p>​\t只要我们的代码不访问它处理的一些类型的对象（或者只要它始终是 object 类型的成员），泛型类就可以处理任何类型。符合约束的类型参数叫作未绑定的类型参数 (unbounded type parameter)。然而，如果代码尝试使用其他成员，编译器会产生一个错误消息。</p>\n<p>​\t例如，如下代码声明了一个叫作 Simple 的类，它有一个叫作 LessThan 的方法，接受了同 - 一泛型类型的两个变量。LessThan 尝试用小于运算符返回结果。但是由于不是所有的类都实现了小于运算符，也就不能用任何类来代替 T, 所以编译器会产生一个错误消息。</p>\n<pre><code class=\"language-C#\">class Simple&lt;T&gt;\n&#123;\n    static public bool LessThan(T i1, T i2)\n    &#123;\n        return i1&lt;i2;\t\t\t\t\t\t//错误\n    &#125;\n&#125;\n</code></pre>\n<p>要让泛型变得更有用，我们需要提供额外的信息让编译器知道参数可以接受哪些类型。这些额外的信息叫作约束 (constraint)。只有符合约束的类型才能替代给定的类型参数来产生构造类型。</p>\n<ul>\n<li>\n<p>where 子句<br />\n约束使用 where 子句列出。</p>\n<ul>\n<li>\n<p>每一个有约束的类型参数都有自己的 where 子句。</p>\n</li>\n<li>\n<p>如果形参有多个约束，它们在 where 子句中用逗号隔开。</p>\n</li>\n<li>\n<p>where 子句语法如下：</p>\n<pre><code class=\"language-c#\">where TypeParam : constraint, constraint.……\n</code></pre>\n</li>\n</ul>\n<p>有关 where 子句要点如下。</p>\n<ul>\n<li>它们在类型参数列表的关闭尖括号之后列出。</li>\n<li>它们不使用逗号或其他符号分隔。</li>\n<li>它们可以以任何次序列出。</li>\n<li>where 是上下文关键字，所以可以在其他上下文中使用。</li>\n</ul>\n</li>\n<li>\n<p>约束类型和次序<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20221005201242408.png\" alt=\"image-20221005201242408\" /></p>\n<p>where 子句可以以任何次序列出。但是 where 子句中的约束必须有特定的顺序。</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20221005201938496.png\" alt=\"\" /></p>\n<ul>\n<li>最多只能有一个主约束，而且必须放在第一位。</li>\n<li>可以有任意多的接口名称约束。</li>\n<li>如果存在构造函数约束，则必须放在后面。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-泛型方法\"><a class=\"anchor\" href=\"#3-泛型方法\">#</a> 3. 泛型方法</h3>\n<p>与其他泛型不一样，方法是成员，不是类型。泛型方法额可以在泛型和非泛型以及结构和接口中声明。</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20221005202405807.png\" alt=\"image-20221005202405807\" /></p>\n<ol>\n<li>\n<p>声明泛型方法<br />\n泛型方法具有类型参数列表和可选的约束。</p>\n<ul>\n<li>泛型方法有两个参数列表\n<ul>\n<li>封闭在圆括号内的方法参数列表。</li>\n<li>封闭在尖括号内的类型参数列表。</li>\n</ul>\n</li>\n<li>要声明泛型方法，需要：\n<ul>\n<li>在方法之后和方法参数列表之前放置类型参数列表。</li>\n<li>在方法参数列表后放置可选的约束子句。</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20221005203042377.png\" alt=\"image-20221005203042377\" /></p>\n</li>\n<li>\n<p>调用泛型方法<br />\n要调用泛型方法，应该在方法调用时提供类型实参。<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20221005203230378.png\" alt=\"image-20221005203230378\" /></p>\n<ul>\n<li>\n<p>推断类型</p>\n<p>如果我们为方法传入参数，编译器有时可以从方法参数的类型中推断出应用作泛型方法的类型参数的类型。这样就可以使方法调用更简单，可读性更强。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-拓展方法和泛型类\"><a class=\"anchor\" href=\"#4-拓展方法和泛型类\">#</a> 4. 拓展方法和泛型类</h3>\n<p>可以将类中的静态方法关联到不同的泛型类上，且允许像调用类构造实例的实例方法一样来调用方法。</p>\n<p>和非泛型类一样，泛型类的拓展方法：</p>\n<ul>\n<li>必须声明位 static；</li>\n<li>必须是静态成员；</li>\n<li>第一个参数类型中必须有关键字 this，后面是拓展的泛型类的名字。</li>\n</ul>\n<h3 id=\"5-泛型结构\"><a class=\"anchor\" href=\"#5-泛型结构\">#</a> 5. 泛型结构</h3>\n<p>与泛型类相似，泛型结构可以有类型参数和约束。泛型结构的规则和条件与泛型类是一样的。</p>\n<h3 id=\"6-泛型委托\"><a class=\"anchor\" href=\"#6-泛型委托\">#</a> 6. 泛型委托</h3>\n<p>泛型委托和非泛型委托非常相似，不过类型参数决定了能接受什么样的方法。</p>\n<ul>\n<li>要声明泛型委托，在委托名称之后、委托参数列表之前的尖括号中放置类型参数列表。<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20221005205322633.png\" alt=\"image-20221005205322633\" /></li>\n<li>注意，有两个参数列表：委托形参列表和类型参数列表。</li>\n<li>类型参数的范围包括：\n<ul>\n<li>返回类型</li>\n<li>形参列表</li>\n<li>约束子句</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-泛型接口\"><a class=\"anchor\" href=\"#7-泛型接口\">#</a> 7. 泛型接口</h3>\n<p>泛型接口允许我们编写形参和接口成员返回类型是泛型类型参数的接口。泛型接口的声明和非泛型接口的声明差不多，但是需要在接口名称之后的尖括号中放置类型参数。</p>\n<p><strong>实现泛型类型接口时，必须保证类型实参的组合不会在类型中产生两个重复的接口。</strong></p>\n<h3 id=\"8-协变和逆变\"><a class=\"anchor\" href=\"#8-协变和逆变\">#</a> 8. 协变和逆变</h3>\n<ol>\n<li>\n<p>协变<br />\n每一个类型都有一种类型，可以将派生类的对象赋值给基类型的变量，叫作赋值兼容性。</p>\n<pre><code class=\"language-c#\">class Animal &#123;public int Legs=4;&#125;\t//基类\nclass Dog:Animal &#123;&#125;\t\t\t\t\t//派生类\n\ndelegate T Factory&lt;T&gt;();\t\t\t//Factory委托\n\nclass Program\n&#123;\n    static Dog MakeDog()\t\t\t//匹配Factory委托的方法\n    &#123;\n        return new Dog();\n    &#125;  \n\n\tstatic void Main()\n    &#123;\n        Factory&lt;Dog&gt;dogMaker =MakeDog;//创建委托对象\n\t\tFactory&lt;.Animal&gt;animalMaker=dogMaker;//尝试赋值委托对象里文本.编译错误！\n            \n\t\tConsole.WriteLine(animalMaker().Legs.ToString());\n    &#125;\n&#125;\n</code></pre>\n<p>这个原则成立，但是对于这种情况不适用！问题在于尽管 Dog 是 Animal 的派生类，但是委托 Factory&lt;Dog&gt; 没有从委托 Factory&lt;Animal &gt; 派生。相反，两个委托对象是同级的，它们都从 delegate 类型派生，后者又派生自 object 类型，如下图所示。两者之间没有派生关系，因此赋值兼容性不适用。<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20221005210713287.png\" alt=\"\" /></p>\n<p>仅将派生类型用作输出值与构造委托有效性之间的常数关系叫作协变。为了让编译器知道这是我们的期望，必须使用 out 关键字标记委托声明中的类型参数。<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20221005211019289.png\" alt=\"image-20221005211019289\" /></p>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20221005211259289.png\" alt=\"image-20221005211259289\" /></p>\n<ul>\n<li>图左边栈中的变量是 T Factory&lt;outT&gt;() 类型的委托，其中类型变量 T 是 Animal 类。</li>\n<li>图右边堆上实际构造的委托是使用 Dog 类的类型变量进行声明的，Dog 派生自 Animal。</li>\n<li>这是可行的，因为在调用委托的时候，调用代码接受 Dog 类型的对象，而不是期望的 Animal 类型的对象。调用代码可以自由地操作对象的 Animal 部分。</li>\n</ul>\n</li>\n<li>\n<p>逆变</p>\n<p>​\t和之前的情况相似，默认情况下不可以赋值两种不兼容的类型。但是和之前情况也相似的是，有一些情况可以让这种赋值生效。</p>\n<p>其实，如果类型参数只用作委托中方法的输入参数的话就可以了。这是因为即使调用代码传入了一个程度更高的派生类的引用，委托中的方法也只期望一个程度低一些的派生类的引用一当然，它仍然接收并知道如何操作。<br />\n这种在期望传入基类时允许传人派生对象的特性叫作逆变。可以通过在类型参数中显式使用 in 关键字来使用逆变。</p>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20221005211659573.png\" alt=\"image-20221005211659573\" /></p>\n<ul>\n<li>图左边栈上的变量是 void Action1&lt;inT&gt;(Tp) 类型的委托，其类型变量是 Dog 类。</li>\n<li>图右边实际构建的委托使用 Animal 类的类型变量来声明，它是 Dog 类的基类。</li>\n<li>这样可以工作，因为在调用委托的时候，调用代码为方法 ActOnAnimal 传人 Dog 类型的变<br />\n量，而它期望的是 Animal 类型的对象。方法当然可以像期望的那样自由操作对象的 Animal<br />\n 部分。</li>\n</ul>\n</li>\n<li>\n<p>协变和逆变的不同<br />\n<img data-src=\"http://lgqimg.changzer.cn/image-20221005211755664.png\" alt=\"image-20221005211755664\" /></p>\n<ul>\n<li>左边栈上的变量是 F (outT)() 类型的委托，类型参数是 Base 类。</li>\n<li>在右边实际构建的委托使用 Derived 类的类型变量进行声明，这个类派生自 Base 类。</li>\n<li>这样可以工作，因为在调用委托的时候，方法返回指向派生类型的对象的引用，这也是指向基类的引用，即调用代码所期望的。</li>\n</ul>\n<p><img data-src=\"http://lgqimg.changzer.cn/image-20221005211806392.png\" alt=\"image-20221005211806392\" /></p>\n<ul>\n<li>左边栈上的变量是 F&lt;intT&gt;(Tp) 类型的委托，类型参数是 Derived 类。</li>\n<li>在右边实际构建委托的时候，使用 Base 类的类型变量进行声明，这个类是 Derived 类的基类。</li>\n<li>这样可以工作，因为在调用委托的时候，调用代码向方法传入了派生类型的对象，方法期望的只是基类型的对象。方法完全可以自由操作对象的基类部分。</li>\n</ul>\n</li>\n<li>\n<p>接口的协变和逆变</p>\n<p>注意几点：</p>\n<ul>\n<li>代码使用类型参数 T 声明了泛型接口。out 关键字指定了类型参数是协变的。</li>\n<li>泛型类 SimpleReturn 实现了泛型接口。</li>\n<li>方法 DoSomething 演示了方法如何接受一个接口作为参数。这个方法接受由 Animal 类型构建的泛型接口 IMyIfc 作为参数。</li>\n</ul>\n</li>\n<li>\n<p>编译器可以自动识别某个已构建的委托是协变还是逆变并且自动进行类型强制转换。这通常发生在没有为对象的类型赋值的时候</p>\n</li>\n</ol>\n<h2 id=\"九-反射\"><a class=\"anchor\" href=\"#九-反射\">#</a> 九、反射</h2>\n<h3 id=\"1-元数据与反射\"><a class=\"anchor\" href=\"#1-元数据与反射\">#</a> 1. 元数据与反射</h3>\n<ul>\n<li>有关程序以及类型的数据被称为元数据。被保存在程序的程序集中。</li>\n<li>程序在运行时，可以查看其他程序集或其本身的元数据。运行中程序查看本身的元数据或其他程序元数据的行为被称为反射。</li>\n<li>要使用反射，必须使用 System.Reflection 命名空间。</li>\n</ul>\n<h3 id=\"2-type类\"><a class=\"anchor\" href=\"#2-type类\">#</a> 2. Type 类</h3>\n<p>BCL 声明了一个叫作 Type 的抽象类，被设计用来包含类的特征。使用这个类能够获取程序的类型和信息。</p>\n<ol>\n<li>\n<p>有关 type 的重要事项。</p>\n<ul>\n<li>对于程序中用到的每一个类型，CLR 都会从创建一个包含这个类型信息的 Type 类型的对象。</li>\n<li>不管创建的类型有多少个实例，只有一个 Type 对象会关联到所有这些实例。</li>\n</ul>\n<p>type 类的成员：<br />\n<img data-src=\"http://lgqimg.changzer.cn/img/image-20221007194923321.png\" alt=\"image-20221007194923321\" /></p>\n</li>\n<li>\n<p>获取 type 对象</p>\n<p>object 类型包含了一个叫作 GetType 的方法，它返回对实例的 Type 对象的引用。由于每一个类型最终<br />\n都是从 object 派生的，所以我们可以在任何类型的对象上使用 GetType 方法来获取它的 Type 对<br />\n象。</p>\n<p>还可以使用 typeof 运算符来获取对象。只需要提供类型名作为操作数，就会返回 type 对象的引用。</p>\n</li>\n</ol>\n",
            "tags": [
                "C#"
            ]
        }
    ]
}